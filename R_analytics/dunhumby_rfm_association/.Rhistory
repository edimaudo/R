library(caret)
library(data.table)
airQ = as.data.frame(read_excel(file.choose())) #excel file
View(airQ)
#sort by wind
airQ <- airQ %>%
sort(wind)
View(airQ)
#sort by wind
airQ <- airQ %>%
sort(Wind)
airQ <- airQ %>%
arrange(Wind)
View(airQ)
#remove where ozone is NA
airQ <- airQ %>%
filter(!is.na(Ozone))
View(airQ)
airQ <- airQ %>%
filter(Ozone != "NA")
View(airQ)
View(airQ)
airQ <- airQ %>%
select (-Solar.R) %>%
mutate(ozone_wind_ratio = Ozone/Wind)
View(airQ)
airQ <- airQ %>%
select (-Solar.R)
View(airQ)
airQ <- airQ %>%
filter(Ozone != "NA")
airQ <- airQ %>%
select (-Solar.R) %>%
mutate(ozone_wind_ratio = Ozone/Wind)
airQ = as.data.frame(read_excel(file.choose())) #excel file
airQ <- airQ %>%
select (-Solar.R) %>%
mutate(ozone_wind_ratio == Ozone/Wind)
airQ <- airQ %>%
mutate(ozone_wind_ratio == Ozone/Wind)
airQ <- airQ %>%
mutate(ozone_wind_ratio = Ozone/Wind)
View(airQ)
#sort by wind
airQ <- airQ %>%
arrange(Wind)
#remove where ozone is NA
airQ <- airQ %>%
filter(Ozone != "NA")
airQ <- airQ %>%
mutate(ozone_wind_ratio = Ozone/Wind)
View(airQ)
airQ <- airQ %>%
select (-Solar.R) %>%
mutate(ozone_wind_ratio = Ozone/Wind)
airQ <- airQ %>%
select (-Solar.R) %>%
mutate(ozone_wind_ratio = Ozone / Wind)
glimpse(airQ$Ozone)
unique(airQ$Ozone)
glimpse(airQ$Wind)
airQ <- airQ %>%
select (-Solar.R) %>%
mutate(Ozone = as.numeric(Ozone)) %>%
mutate(ozone_wind_ratio = Ozone / Wind)
View(airQ)
View(airQ)
View(airQ)
#read data
airQ = as.data.frame(read_excel(file.choose())) #excel file
#backup
airQ.orig <- airQ
View(airQ.orig)
View(airQ.orig)
ozone_temp <- airQ.orig %>%
filter(Temp >= 60) %>%
filter(Ozone != "NA") %>%
ggplot( aes(x=Ozone, y=Temp, color=Month)) + geom_point() +
labs(title="Ozone against Temp for",
x="Ozone", y = "Temperature") + theme_classic()
print(ozone_temp)
ozone_temp <- airQ.orig %>%
filter(Temp >= 60) %>%
filter(Ozone != "NA") %>%
ggplot( aes(x=Ozone, y=Temp, color=Month)) + geom_smooth() +
labs(title="Ozone against Temp for Month X",
x="Ozone", y = "Temperature") + theme_classic()
print(ozone_temp)
ozone_temp <- airQ.orig %>%
filter(Temp >= 60) %>%
filter(Ozone != "NA") %>%
ggplot( aes(x=Ozone, y=Temp, color=Month)) + geom_line() +
labs(title="Ozone against Temp for Month X",
x="Ozone", y = "Temperature") + theme_classic()
print(ozone_temp)
ozone_temp <- airQ.orig %>%
filter(Temp >= 60) %>%
filter(Ozone != "NA") %>%
ggplot( aes(x=Ozone, y=Temp, color=Month)) + geom_abline() +
labs(title="Ozone against Temp for Month X",
x="Ozone", y = "Temperature") + theme_classic()
print(ozone_temp)
ozone_temp <- airQ.orig %>%
filter(Temp >= 60) %>%
filter(Ozone != "NA") %>%
ggplot( aes(x=Ozone, y=Temp, color=Month)) + geom_bar() +
labs(title="Ozone against Temp for Month X",
x="Ozone", y = "Temperature") + theme_classic()
print(ozone_temp)
ozone_temp <- airQ.orig %>%
filter(Temp >= 60) %>%
filter(Ozone != "NA") %>%
ggplot( aes(x=Ozone, y=Temp, color=Month)) + geom_boxplot() +
labs(title="Ozone against Temp for Month X",
x="Ozone", y = "Temperature") + theme_classic()
print(ozone_temp)
ozone_temp <- airQ.orig %>%
filter(Temp >= 60) %>%
filter(Ozone != "NA") %>%
ggplot( aes(x=Ozone, y=Temp, color=Month)) + geom_curve() +
labs(title="Ozone against Temp for Month X",
x="Ozone", y = "Temperature") + theme_classic()
print(ozone_temp)
ozone_temp <- airQ.orig %>%
filter(Temp >= 60) %>%
filter(Ozone != "NA") %>%
ggplot( aes(x=Ozone, y=Temp, color=Month)) + geom_density() +
labs(title="Ozone against Temp for Month X",
x="Ozone", y = "Temperature") + theme_classic()
print(ozone_temp)
ozone_temp <- airQ.orig %>%
filter(Temp >= 60) %>%
filter(Ozone != "NA") %>%
mutate(Month = as.factor(Month))
ggplot( aes(x=Ozone, y=Temp, color=Month)) + geom_point() +
labs(title="Ozone against Temp for Month X",
x="Ozone", y = "Temperature") + theme_classic()
print(ozone_temp)
ozone_temp <- airQ.orig %>%
filter(Temp >= 60) %>%
filter(Ozone != "NA") %>%
mutate(Month = as.factor(Month))
ggplot( aes(x=Ozone, y=Temp, color=Month)) + geom_point() +
labs(title="Ozone against Temp for Month X",
x="Ozone", y = "Temperature") + theme_classic()
print(ozone_temp)
ozone_temp <- airQ.orig %>%
filter(Temp >= 60) %>%
filter(Ozone != "NA") %>%
ggplot( aes(x=Ozone, y=Temp, color=Month)) + geom_point() +
labs(title="Ozone against Temp for Month X",
x="Ozone", y = "Temperature") + theme_classic()
print(ozone_temp)
View(airQ)
month_day <- airQ.orig %>%
filter(Temp > 65 & Wind > 10.3) %>%
transmute(as.Date(Month,Day , sep = "." ) , format = "%m.%d")
month_day <- airQ.orig %>%
filter(Temp > 65 & Wind > 10.3) %>%
transmute(MonthDate =  as.Date(Month,Day , sep = "." ) , format = "%m.%d")
month_day <- airQ.orig %>%
filter(Temp > 65 & Wind > 10.3) %>%
mutate(MonthDate =  as.Date(Month,Day , sep = "." ) , format = "%m.%d")
month_day <- airQ.orig %>%
filter(Temp > 65 & Wind > 10.3)
month_day <- airQ.orig %>%
filter(Temp > 65 & Wind > 10.3) %>%
mutate(MonthDate =  as.Date(Month,Day , sep = "." ) , format = "%m.%d")
month_day <- airQ.orig %>%
filter(Temp > 65 & Wind > 10.3) %>%
mutate(MonthDate =  as.Date(Month,Day , sep = "." ) , format = "%m.%d", origin = "1960-10-01")
month_day <- airQ.orig %>%
filter(Temp > 65 & Wind > 10.3) %>%
mutate(as.Date( paste(Month , Day , sep = "." )  , format = "%m.%d" ))
View(month_day)
month_day <- airQ.orig %>%
filter(Temp > 65 & Wind > 10.3) %>%
mutate(DateInfo = as.Date( paste(Month , Day , sep = "." )  , format = "%m.%d" ))
View(month_day)
df <- read.csv(file.choose(), sep= ",")
library(ggplot2)
library(tidyverse)
glimpse(df)
df.orig <- df
df <- df%>%
select(id, teacher_prefix, school_state, project_grade_category, project_subject_categories,
project_subject_subcategories, teacher_number_of_previously_posted_projects, project_is_approved)
#-------------
# Are there any NaN values?
#-------------
sapply(df, function(y) sum(length(which(is.na(y)))))
#-------------
# Remove Incomplete Observations
#-------------
df <- df[complete.cases(df), ]
df_observation_name <- df %>% select(observation_name)
View(df)
teacher_prefix <- levels(teacher_prefix)
df$teacher_prefix <- levels(df$teacher_prefix)
unique(df$teacher_prefix)
levels(df$teacher_prefix) <- c('Dr.', 'Mr.', 'Mrs.', 'Ms.', 'Teacher')
df$teacher_prefix <- factor(df$teacher_prefix)
View(df)
df$teacher_prefix <- levels(df$teacher_prefix)
View(df)
glimpse(df)
df$project_is_approved <- as.factor(df$project_is_approved)
glimpse(df)
set.seed=1
(acf(arima.sim(n=1000, model=list(ma=c(XX,XX)))))
set.seed=1
(acf(arima.sim(n=1000, model=list(ma=c(0,5)))))
set.seed=1
(acf(arima.sim(n=1000, model=list(ma=c(0,1)))))
set.seed=1
(acf(arima.sim(n=1000, model=list(ma=c(0,2)))))
1 - 0.014
0.406 - 0.014
#remove old data
rm(list=ls())
#libraries
library(tidyverse)
library(lubridate)
library(stringr)
library(ggplot2)
#load data
df <- read.csv(file.choose(), sep= ",")
glimpse(df)
View(df)
df <- read.csv(file.choose(), sep= ",")
View(df)
df <- read.csv(file.choose(), sep= ",")
View(df)
View(df)
names(df) <- c("start_time","end_time","begin_count","end_count","place")
glimpse(df)
apply(df, 2, function(x) any(is.na(x)))
View(df)
#clear old data
rm(list=ls())
#load libraries
library(tidyverse)
library(ggplot2)
library(readxl)
#load excel file
df <- as.data.frame(read_excel(file.choose()))
View(df)
glimpse(df)
apply(df, 2, function(x) any(is.na(x)))
#do rfm model
rfm_data <- df %>%
select(CUSTNO,TRANDATE,EARN) %>%
drop_na()
#convert date
rfm_data <- rfm_data %>%
mutate(TRANDATE = as.Date(TRANDATE,"%Y-%m-%d"))
View(rfm_data)
#do rfm model
rfm_data <- df %>%
select(CUSTNO,TRANDATE,SALESTXN) %>%
drop_na()
glimpse(rfm_data)
rfm_data2 <- rfm_data %>%
group_by(CUSTNO) %>%
summarise(recency=-(as.numeric(as.Date(today())-max(TRANDATE))),
frequency=n_distinct(CUSTNO), monetary= sum(SALESTXN))
library(lubridate)
rfm_data2 <- rfm_data %>%
group_by(CUSTNO) %>%
summarise(recency=-(as.numeric(as.Date(today())-max(TRANDATE))),
frequency=n_distinct(CUSTNO), monetary= sum(SALESTXN))
#do rfm model
rfm_data <- df %>%
select(CUSTNO,TRANDATE,SALESTXN) %>%
drop_na()
#convert date
rfm_data <- rfm_data %>%
mutate(TRANDATE = as.Date(TRANDATE,"%Y-%m-%d"))
rfm_data2 <- rfm_data %>%
group_by(CUSTNO) %>%
summarise(recency=-(as.numeric(as.Date(today())-max(TRANDATE))),
frequency=n_distinct(CUSTNO), monetary= sum(SALESTXN))
View(rfm_data2)
rfm_data2 <- rfm_data %>%
group_by(CUSTNO) %>%
summarise(recency=(as.numeric(as.Date(today())-max(TRANDATE))),
frequency=n_distinct(CUSTNO), monetary= sum(SALESTXN))
View(rfm_data2)
rfm_data2 <- rfm_data %>%
group_by(CUSTNO) %>%
summarise(recency=(as.numeric(as.Date(today())-max(TRANDATE))),
frequency=n(CUSTNO), monetary= sum(SALESTXN))
rfm_data2 <- rfm_data %>%
group_by(CUSTNO) %>%
summarise(recency=(as.numeric(as.Date(today())-max(TRANDATE))),
frequency=count(CUSTNO), monetary= sum(SALESTXN))
rfm_data2 <- rfm_data %>%
group_by(CUSTNO) %>%
summarise(recency=(as.numeric(as.Date(today())-max(TRANDATE))),
frequency=n(), monetary= sum(SALESTXN))
View(rfm_data2)
rfm_data2 <- NULL
#create real rfm data
rfm_temp <- rfm_data %>%
group_by(CUSTNO) %>%
summarise(recency=(as.numeric(as.Date(today())-max(TRANDATE))),
frequency=n(), monetary= sum(SALESTXN))
#rfm rank scoring
# sort data set for Recency with Recency (ascending) - Frequency (descending) - Monetary (descending)
rfm_temp <- rfm_temp %>%
arrange(recency, desc(frequency), desc(monetary))
rfm_temp$rankR <- cut(rfm_temp$recency,5,labels=F)
rfm_temp <- rfm_temp %>%
mutate(recency = 0-recency)
# sort data set for Frequency with Recency (descending) - Frequency (ascending) - Monetary (descending)
rfm_temp <- rfm_temp %>%
arrange(desc(recency), frequency, desc(monetary))
rfm_temp$rankF <- cut(rfm_temp$frequency,5,labels=F)
# sort data set for Monetary with Recency (descending) - Frequency (descending) - Monetary (ascending)
rfm_temp <- rfm_temp %>%
arrange(desc(recency), desc(frequency), monetary)
rfm_temp$rankM <- cut(rfm_temp$monetary,5,labels=F)
rfm_temp$Score <- with(rfm_temp, paste0(rankR, rankF, rankM))
rfm_temp <- rfm_temp %>%
mutate(Score = as.integer(Score))
View(rfm_temp)
rfm_temp <- rfm_data %>%
group_by(CUSTNO) %>%
summarise(recency=(as.numeric(as.Date(today())-max(TRANDATE))),
frequency=n(), monetary= sum(SALESTXN))
#rfm rank scoring
# sort data set for Recency with Recency (ascending) - Frequency (descending) - Monetary (descending)
rfm_temp <- rfm_temp %>%
arrange(recency, desc(frequency), desc(monetary))
rfm_temp$rankR <- cut(rfm_temp$recency,5,labels=F)
View(rfm_temp)
rfm_temp <- rfm_temp %>%
mutate(recency = 0-recency)
glimpse(rfm$recency)
glimpse(rfm_temp$recency)
#rfm rank scoring
# sort data set for Recency with Recency (ascending) - Frequency (descending) - Monetary (descending)
rfm_temp <- rfm_temp %>%
arrange(recency, desc(frequency), desc(monetary))
rfm_temp$rankR <- cut(rfm_temp$recency,5,labels=F)
rfm_temp <- rfm_temp %>%
mutate(recency = 0-recency)
rfm_temp <- rfm_temp %>%
arrange(desc(recency), frequency, desc(monetary))
rfm_temp$rankF <- cut(rfm_temp$frequency,5,labels=F)
View(rfm_temp)
rfm_temp <- rfm_temp %>%
arrange(desc(recency), desc(frequency), monetary)
rfm_temp$rankM <- cut(rfm_temp$monetary,5,labels=F)
View(rfm_temp)
rfm_temp$Score <- with(rfm_temp, paste0(rankR, rankF, rankM))
rfm_temp <- rfm_temp %>%
mutate(Score = as.integer(Score))
View(rfm_temp)
rfm_temp <- rfm_temp %>%
arrange(desc(Score))
View(rfm_temp)
#create real rfm data
rfm_temp <- rfm_data %>%
group_by(CUSTNO) %>%
summarise(recency=(as.numeric(as.Date(today())-max(TRANDATE))),
frequency=n(), monetary= sum(SALESTXN))
#rfm rank scoring
# sort data set for Recency with Recency (ascending) - Frequency (descending) - Monetary (descending)
rfm_temp <- rfm_temp %>%
arrange(recency, desc(frequency), desc(monetary))
rfm_temp$rankR <- cut(rfm_temp$recency,5,labels=F)
#rfm_temp <- rfm_temp %>%
#  mutate(recency = 0-recency)
# sort data set for Frequency with Recency (descending) - Frequency (ascending) - Monetary (descending)
rfm_temp <- rfm_temp %>%
arrange(desc(recency), frequency, desc(monetary))
rfm_temp$rankF <- cut(rfm_temp$frequency,5,labels=F)
# sort data set for Monetary with Recency (descending) - Frequency (descending) - Monetary (ascending)
rfm_temp <- rfm_temp %>%
arrange(desc(recency), desc(frequency), monetary)
rfm_temp$rankM <- cut(rfm_temp$monetary,5,labels=F)
rfm_temp$Score <- with(rfm_temp, paste0(rankR, rankF, rankM))
rfm_temp <- rfm_temp %>%
mutate(Score = as.integer(Score))
View(rfm_temp)
#create real rfm data
rfm_temp <- rfm_data %>%
group_by(CUSTNO) %>%
summarise(recency=(as.numeric(as.Date(today())-max(TRANDATE))),
frequency=n(), monetary= sum(SALESTXN))
#rfm rank scoring
# sort data set for Recency with Recency (ascending) - Frequency (descending) - Monetary (descending)
rfm_temp <- rfm_temp %>%
arrange(recency, desc(frequency), desc(monetary))
rfm_temp$rankR <- cut(rfm_temp$recency,5,labels=F)
rfm_temp <- rfm_temp %>%
mutate(recency = 0-recency)
# sort data set for Frequency with Recency (descending) - Frequency (ascending) - Monetary (descending)
rfm_temp <- rfm_temp %>%
arrange(desc(recency), frequency, desc(monetary))
rfm_temp$rankF <- cut(rfm_temp$frequency,5,labels=F)
# sort data set for Monetary with Recency (descending) - Frequency (descending) - Monetary (ascending)
rfm_temp <- rfm_temp %>%
arrange(desc(recency), desc(frequency), monetary)
rfm_temp$rankM <- cut(rfm_temp$monetary,5,labels=F)
rfm_temp$Score <- with(rfm_temp, paste0(rankR, rankF, rankM))
rfm_temp <- rfm_temp %>%
mutate(Score = as.integer(Score))
View(rfm_temp)
#change recency back to normal
rfm_temp <- rfm_temp %>%
mutate(recency = 0-recency)
rfm_temp <- rfm_temp %>%
arrange(desc(Score))
View(rfm_temp)
#create real rfm data
rfm_temp <- rfm_data %>%
group_by(CUSTNO) %>%
summarise(recency=(as.numeric(as.Date(today())-max(TRANDATE))),
frequency=n(), monetary= sum(SALESTXN))
#rfm rank scoring
# sort data set for Recency with Recency (ascending) - Frequency (descending) - Monetary (descending)
rfm_temp <- rfm_temp %>%
arrange(recency, desc(frequency), desc(monetary))
rfm_temp$rankR <- cut(rfm_temp$recency,5,labels=F)
rfm_temp <- rfm_temp %>%
mutate(recency = 0-recency)
# sort data set for Frequency with Recency (descending) - Frequency (ascending) - Monetary (descending)
rfm_temp <- rfm_temp %>%
arrange(desc(recency), frequency, desc(monetary))
rfm_temp$rankF <- cut(rfm_temp$frequency,5,labels=F)
# sort data set for Monetary with Recency (descending) - Frequency (descending) - Monetary (ascending)
rfm_temp <- rfm_temp %>%
arrange(desc(recency), desc(frequency), monetary)
rfm_temp$rankM <- cut(rfm_temp$monetary,5,labels=F)
rfm_temp$Score <- with(rfm_temp, paste0(rankR, rankF, rankM))
rfm_temp <- rfm_temp %>%
mutate(Score = as.integer(Score))
View(rfm_temp)
rfm_temp <- rfm_temp %>%
arrange(desc(Score))
View(rfm_temp)
rfm_temp <- NULL
#create real rfm data
rfm_temp <- rfm_data %>%
group_by(CUSTNO) %>%
summarise(recency=(as.numeric(as.Date(today())-max(TRANDATE))),
frequency=n(), monetary= sum(SALESTXN))
# sort data set for Recency with Recency (ascending) - Frequency (descending) - Monetary (descending)
rfm_temp <- rfm_temp %>%
arrange(recency, desc(frequency), desc(monetary))
rfm_temp <- rfm_temp %>%
mutate(recency = 0-recency)
rfm_temp$rankR <- cut(rfm_temp$recency,5,labels=F)
#change recency back to normal
rfm_temp <- rfm_temp %>%
mutate(recency = 0-recency)
View(rfm_temp)
rfm_temp <- rfm_temp %>%
arrange(desc(recency), frequency, desc(monetary))
rfm_temp$rankF <- cut(rfm_temp$frequency,5,labels=F)
View(rfm_temp)
rfm_temp <- rfm_temp %>%
arrange(desc(recency), desc(frequency), monetary)
rfm_temp$rankM <- cut(rfm_temp$monetary,5,labels=F)
View(rfm_temp)
rfm_temp$Score <- with(rfm_temp, paste0(rankR, rankF, rankM))
rfm_temp <- rfm_temp %>%
mutate(Score = as.integer(Score))
View(rfm_temp)
rfm_temp <- rfm_temp %>%
arrange(desc(Score))
View(rfm_temp)
#clear old data
rm(list=ls())
#libraries
library(tidyverse)
library(lubridate)
library(stringr)
library(ggplot2)
#load data
setwd("/Users/edima/Documents/Coding/R/R_analytics/dunhumby_rfm_association/")
#clean filenames
filenames <- gsub("\\.csv$","", list.files(pattern="\\.csv$"))
#load the files
for(i in filenames){
assign(i, read.csv(paste(i, ".csv", sep="")))
}
glimpse(hh_demographic)
glimpse(product)
glimpse(transaction_data0416)
#market basket
data_info <- product %>%
inner_join(PRODUCT_ID,transaction_data0416) %>%
select(PRODUCT_ID, COMMODITY_DESC, household_key)
data_info <- product %>%
inner_join(transaction_data0416,"PRODUCT_ID") %>%
select(PRODUCT_ID, COMMODITY_DESC, household_key)
glimpse(data_info)
mba_app <- as.data.frame(data_info)
#prep data for apriori algorithm
mba_app_trans <- as(split(mba_app[,"COMMODITY_DESC"],
unique(mba_app[,"PRODUCT_ID"])), "transactions")
library(arules)
#prep data for apriori algorithm
mba_app_trans <- as(split(mba_app[,"COMMODITY_DESC"],
unique(mba_app[,"PRODUCT_ID"])), "transactions")
mba_app_rules <- apriori(mba_app_trans,
parameter = list(supp = 0.06, conf = 0.75,
target = "rules", minlen = 2))
summary(mba_app_rules)
