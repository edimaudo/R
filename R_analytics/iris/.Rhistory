dir.create(path = getwd())
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
files.exist("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2").file.path("testdir3")
dir.create("testdir2")
dir.create((file.path("testdir2","testdir3")))
dir.create(file.path("testdir2",testdir3))
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
setwd(olddir)
setwd(old.dir)
unlink('testdir')
unlink('testdir',recursive = TRUE)
1
swirl()
2
0
swirl()
library("swirl")
swirl()
1:20
pi:10
15:17
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0.1,2),times=10)
rep(c(0.1,2),times=20)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect = c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
tt <- num_vect >= 6
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse = " ")
c(my_char,"Ed")
my_name <- c(my_char,"Ed")
my_name
paste(my_name,collapse = " ")
paste("Hello","World!", sep = " ")
paste("Hello","World!", sep = "")
paste("Hello","world!", sep = " ")
c(1:3,c("X","Y","Z"))
paste(1:3,c("X","Y","Z"),sep = "")
paste(LETTERS, 1:4, sep = "-")
library("swirl")
install("open intro")
install_course("open intro")
install_course("Open Intro")
install_course("Data Analysis")
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_course(Data Analysis)
install_course("Data Analysis")
library("swirl")
swirl()
swirl()
1
swirl()
library("swirl")
library(swirl)
swirl()
x = c(44,NA,5,NA)
x <- c(44,NA,5,NA)
x*3
y <-rnorm(1000)
z <- rep(NA,1000)
my_data <-sample(c(y,z),1000)
my_data <-sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(is.na(my_data))
sum(my_data)
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
!x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x>0]
x[!is.na(x) & x > 0]
c(3,5,7)
x[3,5,7]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(foo,bar,norf)
names("foo","bar","norf")
names(vert)
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- c(1:20)
my_vector <- [1:20]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,4,5,False,NULL)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bil","Gina","Kelly","Sean")
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames("patient","age","weight","bp","rating","test")
cnames <- ("patient","age","weight","bp","rating","test")
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
! 5!=7
5==7
!5==7
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical("twins","twins")
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all (ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
submit()
boring_function("my first function")
boring_function("my first function!")
boring_function('My first function!')
boring_function()
boring_function
submit()
submit()
submit()
submit()
boring_function
my_mean
my_mean
submit()
submit()
submit()
submit()
submit()
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
sumbit()
submit()
submit()
evaluate
submit()
evaluate(std,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(x,c(8,4,0))
evaluate(function(x) x[1], c(8, 4, 0))
evaluate(function(x) x[length(x)], c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
SKIP
skip
library("swirl")
swirl()
submti()
submit()
paste(ellipses_func(arg1="START", arg2 = dat, arg3="STOP"), sep = " ",collapse = NULL)
paste(ellipses(arg1="START", arg2 = dat, arg3="STOP"), sep = " ",collapse = NULL)
paste(arg1="START", arg2 = dat, arg3="STOP", sep = " ",collapse = NULL)
submit()
submit()
source('/var/folders/w9/cv0lh9lj3_79503qn1046m_00000gn/T//RtmpJMtRQc/telegram.R')
# demarcate the beginning and end of sentences. Write a function below called
submit()
paste(arg1="START", arg2 = TRUE, sep = " ",collapse = NULL)
submit()
#
# Telegrams used to be peppered with the words START and STOP in order to
# demarcate the beginning and end of sentences. Write a function below called
# telegram that formats sentences for telegrams.
submit()
paste(arg1="START", args2=TRUE ,arg3 = "STOP", sep = " ",collapse = NULL)
submit()
#
# The simon_says function works just like the paste function, except the
# begining of every string is prepended by the string "Simon says:"
#
# Telegrams used to be peppered with the words START and STOP in order to
source('/var/folders/w9/cv0lh9lj3_79503qn1046m_00000gn/T//RtmpJMtRQc/telegram.R')
library("swirl")
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[0]}, c(8,4,0))
evaluate(function(x)x[0], c(8,4,0))
evaluate(function(x){x[0]}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
paste (args1="START",...,args3="STOP" , sep = " ", collapse = NULL)
paste (args1="START",args2=...,args3="STOP" , sep = " ", collapse = NULL)
submit()
telegram("What a day")
# Do your argument unpacking here!
submit()
noun <- args[[3]]
noun <- args[3]
submit()
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
type.as.character(cls_list)
type as.character(cls_list)
type as.character(cls_list)
as.character(cls_list)
?sapply
sapply(flags)
sapply(cls_list)
library("swirl")
swirl()
library("swirl")
swirl()
library("swirl")
swirl()
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
sample()
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100)
sample(c(0.3,0.7),100)
sample(c(0,1),100,replace=FALSE,prob(0.3,0.7))
sample(c(0,1),100,replace=FALSE,prob=(0.3,0.7))
sample(c(0,1),100,replace = FALSE, prob = (0.3,0.7))
sample(c(0,1), 100, replace = TRUE, prob = (0.3,0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,sizr=100,prob = 0.7)
rbinom(1,size=100,prob = 0.7)
flips2 <- rbinom(1,100,prob=0.7)
flips2 <- rbinom(1, 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flip2)
sum(flip2)
flips2
sum(flips2)
?rnorm
rnom(10)
rnorm(10)
rnorm(100,25)
rnorm(10, mean = 100,sd = 25)
?rpois
?rpois()
rpois(5,10)
replicate(100,rpois(5,10))
my_pois = replicate(100,rpois(5,10))
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot()
?plot
plot(x=car$Speed,y=cars$dist)
plot(x=cars$Speed,y=cars$dist)
plot(x=cars$Speed,y=cars$dist,"dist","speed")
plot(cars$Speed,cars$dist,"dist","speed")
plot(cars$Speed,cars$dist)
plot(Speed,dist)
plot(x = cars$speed, y = cars$dist).
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist ,"Speed")
plot(x = cars$speed, y = cars$dist , xlab = "Speed")
plot(x = cars$speed, y = cars$dist , xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist , ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist , xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist , xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim = c(10,15))
plot(cars,pch=2)
mtcars
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library("swirl")
swirl()
2
swirl()
library("swirl")
library(swirl)
install_course("Data Analysis")
install_course(Data Analysis)
install_course(Data_Analysis)
install_course("Data_Analysis")
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_course("Data Analysis")
c(1,"3")
c("1","two",3)
pc.cr <-princomp(mydata, cor = TRUE)# scale data
summary(pc.cr)
biplot(pc.cr)
# Marketing Analytics Session 1
# install the following packages if you haven't done so - only need to do it once
#install.packages("MASS")
#install.packages("mclust")
############
#first read-in data#
mydata = USArrests
# Prepare Data #
mydata <- na.omit(mydata) # listwise deletion of missing
mydata.orig = mydata #save orig data copy
#mydataOther <- data.frame(mydata$Murder,mydata$UrbanPop)
mydata <- scale(mydata) # standardize variables
# k-means #
# Determine number of clusters #
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
# Look for an "elbow" in the scree plot #
# Use optimal no. of clusters in k-means #
k1=3
# K-Means Cluster Analysis
fit <- kmeans(mydata, k1) # k1 cluster solution
# get cluster means
aggregate(mydata.orig,by=list(fit$cluster),FUN=mean)
# append cluster assignment
mydata1 <- data.frame(mydata.orig, fit$cluster)
# Cluster Plot against 1st 2 principal components
# vary parameters for most readable graph
library(cluster)
clusplot(mydata, fit$cluster, color=TRUE, shade=TRUE,labels=2, lines=0)
###################
# perceptual map
pc.cr <-princomp(mydata, cor = TRUE)# scale data
summary(pc.cr)
biplot(pc.cr)
setwd("~/Documents/Coding/R/R_analytics/R_iris")
install.packages("caret")
#iris dataset
setwd()
#load libraries
library(caret)
# attach the iris dataset to the environment
data(iris)
# rename the dataset
dataset <- iris
#iris dataset
setwd()
#load libraries
library(caret)
library(lattice)
library(ggplot2)
# attach the iris dataset to the environment
data(iris)
# rename the dataset
dataset <- iris
#iris dataset
setwd()
#load libraries
library(caret)
library(lattice)
library(ggplot2)
# attach the iris dataset to the environment
data(iris)
# rename the dataset
#dataset <- iris
# define the filename
filename <- "iris.csv"
# load the CSV file from the local directory
dataset <- read.csv(filename, header=FALSE)
# set the column names in the dataset
colnames(dataset) <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width","Species")
