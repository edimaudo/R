days(df_main$CloseDate)
weekdays(df_main$CloseDate)
weekdays(df_main$CloseDate,F)
weekdays(as.POSIXct(df_main$CloseDate))
df_main$month <- month(df_main$CloseDate)
#day of week
df_main$day <- weekdays(as.POSIXct(df_main$CloseDate))
#Year
df_main$year <- year(df_main$CloseDate)
#day
df_main$day <- day(df_main$CloseDate)
#Create Date features
#month
df_main$month <- month(df_main$CloseDate)
#day of week name
df_main$dayname <- weekdays(as.POSIXct(df_main$CloseDate))
#Year
df_main$year <- year(df_main$CloseDate)
#day
df_main$day <- day(df_main$CloseDate)
View(df_main)
df_cts <- df[,c(2,6,8,9,10)]
#normalize data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
df_cts <- as.data.frame(lapply(df_cts, normalize))
#convert catgeorical
df_cat <- df[,c(3,4,11)]
df_cat <- lapply(df_cat, function(x) as.factor(as.character(x)))
df_cat_new <- dummy.data.frame(as.data.frame(df_cat), sep = "_")
df_id <- df_main$ID
df_Target <- df_main$NetRevenue
#Approach one
#Use one hot encoding
df_cts <- df_main[,c(2,6,8,9,10)]
#normalize data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
df_cts <- as.data.frame(lapply(df_cts, normalize))
#convert catgeorical
df_cat <- df_main[,c(3,4,11)]
df_cat <- lapply(df_cat, function(x) as.factor(as.character(x)))
df_cat_new <- dummy.data.frame(as.data.frame(df_cat), sep = "_")
df_new <- cbind(df_cat_new, df_cts, df_Target)
#remove redundant columns
# # calculate correlation matrix
correlationMatrix <- cor(df_new[,1:length(df_new)-1])
# # summarize the correlation matrix
# print(correlationMatrix)
# # find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
# # print indexes of highly correlated attributes
print(highlyCorrelated)
df_new <- df_new[,-c(highlyCorrelated)]
#split data
set.seed(123)
sample <- sample.split(df_new,SplitRatio = 0.75)
train <- subset(df_new,sample ==TRUE)
test <- subset(df_new, sample==FALSE)
View(df_new)
correlationMatrix <- cor(df_new[,1:length(df_new)-1])
glimpse(df_new)
df_cts <- df_main[,c(2,6,8,9,10)]
#normalize data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
df_cts <- as.data.frame(lapply(df_cts, normalize))
df_cts <- as.data.frame(lapply(df_cts, normalize))
View(df_cts)
df_cts <- df_main[,c(2,6,8,9,10)]
df_new <- cbind(df_cat_new, df_cts, df_Target)
correlationMatrix <- cor(df_new[,1:length(df_new)-1])
summary(df_cts)
length(df_new)-1
View(df_new)
# Second Question: USE US Swiss for this one
# a. Describe the time plot of the series CPI.
# b. Produce the ACF and PACF graphs of the CPI. What  can you learn from the ACF graph?  Does it need differencing?
# c. Is the difference data stationary? Do the appropriate test to find out. Again, set up the null,
#alternative hypotheses and the decision rule.
# d. Assuming that you have obtained the stationarity,
#Identify three ARIMA models that might be useful in describing the time series.
#Explain your reasoning for selecting these models.
# e. Which of your models is the best according to their AIC values? BIC values?
# Estimate the parameters of your best model and do diagnostic testing on the residuals. Do the residuals resemble white noise?
# Write out the estimated equation and the consequent forecasting equation one and two period ahead.
# Use ARIMA to produce the forecast for the next 10 period.
rm(list=ls())
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify','shiny','forecast',"gridExtra")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#load data
df <- read.csv(file.choose())
#data summary
View(df)
file.choose()
df <- readxl::(file.choose())
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify','shiny','forecast',"gridExtra", "readxl")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df <- read_excel(file.choose())
View(df)
#load data
df <- read_excel(file.choose())
View(df)
#data summary
summary(df)
View(df)
colnames(df) <- c("date",'CPI')
#timeplot of CPI Series
# Basic line plot
ggplot(data = df, aes(x = date, y = CPI))+
geom_line(color = "#00AFBB", size = 2)
ggplot(data = df, aes(x = date, y = CPI))+
geom_line(color = "#00AFBB", size = 2) + theme_classic()
tsData <- df[, 1] # ts data
decomposedRes <- decompose(tsData, type="mult") # use type = "additive" for additive components
plot (decomposedRes) # see plot below
stlRes <- stl(tsData, s.window = "periodic")
tsData <- df#[, 1] # ts data
decomposedRes <- decompose(tsData, type="mult") # use type = "additive" for additive components
plot (decomposedRes) # see plot below
stlRes <- stl(tsData, s.window = "periodic")
acfRes <- acf(df) # autocorrelation
pacfRes <- pacf(df)  # partial autocorrelation
#clear old packages
rm(list=ls())
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify','shiny','forecast',"gridExtra", "readxl",
'tseries')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#load data
df <- read_excel(file.choose())
#data summary
summary(df)
#rename columns
colnames(df) <- c("date",'CPI')
#timeplot of CPI Series
# Basic line plot
ggplot(data = df, aes(x = date, y = CPI))+
geom_line(color = "#00AFBB", size = 2) + theme_classic()
plot(aggregate(df,FUN=mean))
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify','shiny','forecast',"gridExtra", "readxl",
'tseries','tsbox')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df1 <- ts(df)
tsData <- df1[, 1] # ts data
decomposedRes <- decompose(tsData, type="mult") # use type = "additive" for additive components
plot (decomposedRes) # see plot below
stlRes <- stl(tsData, s.window = "periodic")
View(df1)
View(df)
ggplot(data = df, aes(x = date, y = CPI))+
geom_line(color = "#00AFBB", size = 0.5) + theme_classic()
tsData <- df1[, 1] # ts data
decomposedRes <- decompose(tsData, type="mult")
View(df1)
View(df)
glimpse(df)
tsData <- df[, 1] # ts data
decomposedRes <- decompose(tsData, type="mult")
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify','shiny','forecast',"gridExtra", "readxl",
'tseries','zoo')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df1 <- zoo(order.by=as.Date(as.character(df$date), format='%m/%d/%Y'),df$CPI )
df1 <- zoo(df$CPI, order.by=as.Date(as.character(df$date), format='%m/%d/%Y'))
df1 <- xts(as.Date(df$date, format='%m/%d/%Y',df$CPI))
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify','shiny','forecast',"gridExtra", "readxl",
'tseries','zoo','xts')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df1 <- xts(as.Date(df$date, format='%m/%d/%Y',df$CPI))
read.table.zoo(file.choose())
df1 <- zoo::as.zoo(df)
df1 <- as.ts(df)
View(df1)
smith <- xts(x = df, order.by = date)
df$date <- as.date(df$date)
df$date <- as.Date(df$date)
smith <- xts(x = df, order.by = date)
View(df)
df1 <- as.ts(df)
View(df1)
df$date <- as.POSIXct(df$date)
smith <- xts(x = df, order.by = date)
#clear old packages
rm(list=ls())
packages <- c('ggplot2', 'corrplot','tidyverse','forecast',"gridExtra",
"readxl",'tseries','zoo','xts','pysch','factorExtra')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df <- read_file(file.choose()) #"HBAT_200.jmp"
shiny::runApp('Documents/Coding/R/shiny/wine_review')
shiny::runApp('Documents/Coding/R/shiny/wine_review')
runApp('Documents/Coding/R/shiny/wine_review')
runApp('Documents/Coding/R/shiny/wine_review')
#clear environment
rm(list=ls())
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify','shiny','countrycode','highcharter',
"gridExtra","readxl")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df <- read_csv(file.choose())
View(df)
summary(df)
glimpse(df)
#check for missing data
missing_data <- apply(df, 2, function(x) any(is.na(x)))
print(missing_data)
corinfo <- cor(df[,1:length(df)-1])
corrplot(corinfo)
corinfo <- cor(df[,1:c(2,3,6)])
corinfo <- cor(df[,c(2,3,6)])
View(corinfo)
corrplot(corinfo)
corrplot(corinfo, method="color")
df_cor <- df(,c(2,3,6))
df_cor <- df[,c(2,3,6)]
View(df_cor)
corinfo <- cor(df_cor)
corrplot(corinfo, method="color")
corrplot(corinfo, method="number")
corrplot(corinfo, method="number")
df <- read_csv(file.choose(),header = T)
df <- read_csv(file.choose(),header = TRUE)
View(df)
corrplot(corinfo, method="number",bg="lightgray")
unique(df$User_Input)
unique(df$User_Outcome)
View(df)
df_cts <- df[,c(2,3)]
df_outcome <- df[,c(6)]
#categorical variables
df_cat <- df[,c(4,5)]
#one hot encoding
df_cat_new <- dummy.data.frame(as.data.frame(df_cat), sep = "_")
df_new <- cbind(df_cat_new, df_cts,df_outcome)
View(df_new)
corrplot(cor(df_new))
corrplot(cor(df_new),method="number")
#check for relationship
corrplot(cor(df_new),method="number",bg="lightgray")
#check for relationship
corrplot(cor(df_new),method="number",bg="lightgray")
View(df)
#clear environment
rm(list=ls())
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify', "RcolorBrewer")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
library(RColorBrewer)
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify', "RColorBrewer")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df <- read_csv(file.choose())
library("GGally")
ggpairs(df, columns = 1:ncol(df), title = "",
axisLabels = "show", columnLabels = colnames(data[, columns]))
ggpairs(df, columns = 1:ncol(df), title = "",
axisLabels = "show", columnLabels = colnames(df[, columns]))
ggpairs(df)
df_cor <- df[,c(2,3,6)]
corinfo <- cor(df_cor)
corrplot(corinfo, method="number",bg="lightgray")
View(df)
tbl = table(df$User_Input, df$User_Outcome)
chisq.test(tbl) #Test hypothesis whether the input is independent of Outcome at .05 significance level.
#graphs
ggplot(data=df, aes(x=User_Input)) +
geom_bar(stat="identity",fill=User_Outcome) + theme_classic() + labs(x = "Age", y = "Count") +
theme(axis.text.x = element_text(angle = 0, hjust = 1),
legend.position="none",axis.title = element_text(size = 25),
axis.text = element_text(size = 15))
ggcorrplot(corinfo)
ggplot(data=df, aes(x=User_Input)) +
geom_bar(stat="identity",aes(fill=User_Outcome)) + theme_classic()
ggplot(data=df, x=User_Input) +
geom_bar(stat="identity",aes(fill=User_Outcome)) + theme_classic()
ggplot(data=df, x=User_Input, y=User_Outcome) +
geom_bar(stat="identity",aes(fill=User_Outcome)) + theme_classic() +
labs(x = "User Input")
View(df)
glimpse(df)
ggplot(data=df, x=User_Input, y=User_Outcome) +
geom_bar(stat="identity",aes(fill=as.factor(User_Outcome))) + theme_classic() +
labs(x = "User Input")
ggplot(data=df, x=as.factor(User_Input)) +
geom_bar(stat="identity",aes(fill=as.factor(User_Outcome))) + theme_classic()
df$User_Outcome <- as.factor(df$User_Outcome)
df$User_Input <- as.factor(df$User_Input)
ggplot(data=df, x=as.factor(User_Input)) +
geom_bar(stat="identity",aes(fill=as.factor(User_Outcome))) + theme_classic()
ggplot(data=df, x=User_Input, fill=User_Outcome)) +
geom_bar(stat="identity") + theme_classic()
ggplot(data=df, x=User_Input, fill=User_Outcome) +
geom_bar(stat="identity") + theme_classic()
ggplot(data=df, aes(x=User_Input, fill=User_Outcome)) +
geom_bar(stat="identity") + theme_classic()
ggplot(data=df, aes(x=User_Input, y=User_Outcome)) +
geom_bar(stat="identity") + theme_classic()
ggplot(data=df, aes(x=User_Input, fill=User_Outcome)) +
geom_bar(stat="identity") + theme_classic()
ggplot(data=df, aes(x=User_Input, y = User_Score, fill=User_Outcome)) +
geom_bar(stat="identity") + theme_classic()
#graphs
ggplot(data=df, aes(x=User_Input, y = User_Score, fill=User_Outcome)) +
geom_bar(stat="identity", position=position_dodge()) + theme_classic()
#graphs
ggplot(data=df, aes(x=User_Input, y = User_Score, fill=User_Outcome)) +
geom_bar(stat="identity") + theme_classic()
ggplot(data=df, aes(x=User_Input, y = User_Score)) +
geom_bar(stat="identity", aes(fill=User_Outcome)) + theme_classic()
ggplot(data=df, aes(x=User_Input, y = User_Outcome)) +
geom_bar(stat="identity", aes(fill=User_Score)) + theme_classic()
ggpairs(df)
unique(df$User_Question) #types of questions
unique(df$User_Input) #types of inputs
unique(df$User_Outcome) #types of inputs
unique(df$User_Score) #score types
#clear environment
rm(list=ls())
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify', "RColorBrewer", "GGally",'ggcorrplot')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#clear environment
rm(list=ls())
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify', "RColorBrewer", "GGally")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df <- read_csv(file.choose())
df.backup <- df
glimpse(df)
#get descriptive stats
summary(df)
#check for missing data
missing_data <- apply(df, 2, function(x) any(is.na(x)))
print(missing_data)
unique(df$User_Question) #types of questions
unique(df$User_Input) #types of inputs
unique(df$User_Outcome) #types of inputs
unique(df$User_Score) #score types
ggpairs(df)
df_cor <- df[,c(2,3,6)]
corinfo <- cor(df_cor)
corrplot(corinfo, method="number",bg="lightgray")
tbl = table(df$User_Input, df$User_Outcome)
chisq.test(tbl)
shiny::runApp('Documents/Coding/R/shiny/wine_review')
shiny::runApp('Documents/Coding/R/shiny/wine_review')
setwd("~/Documents/Coding/R/R_analytics/ab_test")
#clear environment
rm(list=ls())
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify', "RColorBrewer", "GGally")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#load data
test1 <- read.csv("test1.csv")
test2 <- read.csv("test2.csv")
View(test1)
View(test2)
View(test1)
23752.19*1072
View(test2)
View(test1)
val_platform_test1 <- test1 %>%
select(platform,group, booking_amount) %>%
group_by(platform,group) %>%
mutate(booking_amt_total = sum(booking_amount))
View(val_platform_test1)
val_platform_test1 <- test1 %>%
group_by(platform,group) %>%
mutate(booking_amt_total = sum(booking_amount))
View(val_platform_test1)
val_platform_test1 <- test1 %>%
group_by(platform,group) %>%
mutate(booking_amt_total = sum(booking_amount)) %>%
select(platform,group,booking_amt_total) %>%
arrange(desc(booking_amt_total))
View(val_platform_test1)
val_platform_test1 <- test1 %>%
select(platform,group,booking_amount) %>%
group_by(platform,group) %>%
mutate(booking_amt_total = sum(booking_amount)) %>%
select(platform,group, booking_amt_total) %>%
arrange(desc(booking_amt_total))
View(val_platform_test1)
val_platform_test1 <- test1 %>%
select(platform,group,booking_amount) %>%
group_by(platform,group) %>%
summarise(booking_amt_total = sum(booking_amount)) %>%
arrange(desc(booking_amt_total))
View(val_platform_test1)
val_platform_test2 <- test2 %>%
select(platform,group,booking_amount) %>%
group_by(platform,group) %>%
summarise(booking_amt_total = sum(booking_amount)) %>%
arrange(desc(booking_amt_total))
rev_click_test1 <- test1 %>%
mutate(rev_click = revenue/clicks) %>%
summarise(rev_click_amt = sum(rev_click)) %>%
select(rev_click_amt)
View(rev_click_test1)
rev_click_avg_test1 <- test1 %>%
mutate(rev_click = revenue/clicks) %>%
summarise(rev_click_avg = average(rev_click)) %>%
select(rev_click_amt)
rev_click_avg_test2 <- test2 %>%
mutate(rev_click = revenue/clicks) %>%
summarise(rev_click_avg = average(rev_click)) %>%
select(rev_click_amt)
rev_click_avg_test2 <- test2 %>%
mutate(rev_click = revenue/clicks) %>%
summarise(rev_click_avg = avg(rev_click)) %>%
select(rev_click_amt)
rev_click_avg_test1 <- test1 %>%
mutate(rev_click = revenue/clicks) %>%
summarise(rev_click_avg = mean(rev_click)) %>%
select(rev_click_amt)
rev_click_avg_test2 <- test2 %>%
mutate(rev_click = revenue/clicks) %>%
summarise(rev_click_avg = mean(rev_click)) %>%
select(rev_click_amt)
rev_click_avg_test1 <- test1 %>%
mutate(rev_click = revenue/clicks) %>%
summarise(rev_click_avg = mean(rev_click)) %>%
select(rev_click_avg)
rev_click_avg_test2 <- test2 %>%
mutate(rev_click = revenue/clicks) %>%
summarise(rev_click_avg = mean(rev_click)) %>%
select(rev_click_avg)
