rotation="varimax")
# plot factors
load <- fit$loadings[,1:n.factors]
plot(load,type="n") # set up plot
text(load,labels=names(mydata),cex=.7)
#find optimal number of clusters
#using wss
fviz_nbclust(load, kmeans, method = "wss")
#using average silhouette
k.max <- 15
sil <- rep(0, k.max)
# Compute the average silhouette width for
# k = 2 to k = 15
for(i in 2:k.max){
km.res <- kmeans(load, centers = i, nstart = 25)
ss <- silhouette(km.res$cluster, dist(load))
sil[i] <- mean(ss[, 3])
}
# Plot the  average silhouette width
plot(1:k.max, sil, type = "b", pch = 19,
frame = FALSE, xlab = "Number of clusters k")
abline(v = which.max(sil), lty = 2)
# Use optimal no. of clusters in k-means #
k1=4
# Generate K-mean clustering
kfit <- kmeans(load, k1, nstart=25, iter.max=1000,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen"),
trace=FALSE)
#Visualize clusters
fviz_cluster(kfit, data = load, ellipse.type = "convex")+theme_minimal()
fviz_cluster(kfit, data = load, geom = "point",stand = FALSE,
ellipse.type = "norm")
#Get cluster means and median
load_mean <- aggregate(load,by=list(kfit$cluster),FUN=mean)
load_median <- aggregate(load,by=list(kfit$cluster),FUN=median)
# append cluster assignment
loadAssigned <- data.frame(load, kfit$cluster)
# Cluster Plot against 1st 2 principal components
# vary parameters for most readable graph
library(cluster)
clusplot(load, kfit$cluster, color=TRUE, shade=TRUE,labels=2, lines=0)
#Perceptual map
pc.cr <-princomp(load, cor = TRUE) #scale data
summary(pc.cr)
biplot(pc.cr)
##Principal Component Analysis##
mydata.rev = mydata.orig #Retrieve 65 Attitudes
mydata.rev[1] <- NULL #remove the first column
#Perform PCA using prcomp() function
pca <- prcomp(mydata.rev)
#plot the variance in each component:
plot(pca, type="l")
# Manipulate data for PCA Analyis
pca.fortify <- fortify(pca)
#Set the # of clusters
k1=3
# K-Means Cluster Analysis
fit <- kmeans(mydata.rev, k1) # k1 cluster solution
# Add group column using k1=4 groups
pca4.dat <- cbind(pca.fortify, group=fit$cluster)
#Plot Kmeans Cluster:
gg2 <- ggplot(pca4.dat) +
geom_point(aes(x=PC1, y=PC2, col=factor(group), text=rownames(pca4.dat)), size=2) +
labs(title = "Visualizing K-Means Clusters Against First Two Principal Components") +
scale_color_brewer(name="", palette = "Set1")
gg2
##Get the Questions that Pertain to PCA1 and PCA2:
options(max.print=1000000) #expand the # of output to 1000000
otherPCA <- princomp(mydata.rev) #computer for PCA again
otherPCA$loadings #get info on all components including component 1 & 2
#another version of factor analysis using fa function
#library(psych)
#factoranalysis <- fa(r = cor(mydata), nfactors =
#                       n.factors, rotate = "oblimin", fm = "pa")
#plot(factoranalysis,labels=names(mydata),cex=.7, ylim=c(-.1,1))
#Visualize clusters
fviz_cluster(fit, data = mydata, ellipse.type = "convex")+theme_minimal()
fviz_cluster(fit, data = mydata, geom = "point",stand = FALSE,
ellipse.type = "norm")
#plot(factoranalysis,labels=names(mydata),cex=.7, ylim=c(-.1,1))
#factor analysis
#install.packages("mclust")
#install.packages("corrplot")
#install.packages("psy")
#install.packages("nFactors")
#install.packages("GPArotation")
#install.packages("ggfortify")
#install.packages("ggplot2")
library(psy)
library(nFactors)
library(MASS)
library(psych)
library(GPArotation)
library(cluster)
library(ggplot2)
library(factoextra)
library(corrplot)
library(lattice)
library(NbClust)
library(ggfortify)
library(ggplot2)
#Clear old data
rm(list=ls())
#Load data using file chooser
mydata <- read.csv(file.choose(), sep = ',')
#Prepare data
mydata.orig = mydata #save orig data copy
mydata <- na.omit(mydata) # listwise deletion of missing
mydata[1] <- NULL #remove the first column
#set seed
set.seed(1)
#find the optimal # of factors
ev <- eigen(cor(mydata)) # get eigenvalues
ap <- parallel(subject=nrow(mydata),var=ncol(mydata), rep=100, cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
n.factors <- 11
# factor analysis
fit <- factanal(mydata,
n.factors,# number of factors to extract
scores=c("regression"),
rotation="none")
# plot factors
load <- fit$loadings[,1:n.factors]
plot(load,type="n") # set up plot
text(load,labels=names(mydata),cex=.7)
#rotate
fit <- factanal(mydata,
n.factors,# number of factors to extract
scores=c("regression"),
rotation="varimax")
# plot factors
load <- fit$loadings[,1:n.factors]
plot(load,type="n") # set up plot
text(load,labels=names(mydata),cex=.7)
#find optimal number of clusters
#using wss
fviz_nbclust(load, kmeans, method = "wss")
#using average silhouette
k.max <- 15
sil <- rep(0, k.max)
# Compute the average silhouette width for
# k = 2 to k = 15
for(i in 2:k.max){
km.res <- kmeans(load, centers = i, nstart = 25)
ss <- silhouette(km.res$cluster, dist(load))
sil[i] <- mean(ss[, 3])
}
# Plot the  average silhouette width
plot(1:k.max, sil, type = "b", pch = 19,
frame = FALSE, xlab = "Number of clusters k")
abline(v = which.max(sil), lty = 2)
# Use optimal no. of clusters in k-means #
k1=4
# Generate K-mean clustering
kfit <- kmeans(load, k1, nstart=25, iter.max=1000,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen"),
trace=FALSE)
#Visualize clusters
fviz_cluster(kfit, data = load, ellipse.type = "convex")+theme_minimal()
fviz_cluster(kfit, data = load, geom = "point",stand = FALSE,
ellipse.type = "norm")
#Get cluster means and median
load_mean <- aggregate(load,by=list(kfit$cluster),FUN=mean)
load_median <- aggregate(load,by=list(kfit$cluster),FUN=median)
# append cluster assignment
loadAssigned <- data.frame(load, kfit$cluster)
# Cluster Plot against 1st 2 principal components
# vary parameters for most readable graph
library(cluster)
clusplot(load, kfit$cluster, color=TRUE, shade=TRUE,labels=2, lines=0)
#Perceptual map
pc.cr <-princomp(load, cor = TRUE) #scale data
summary(pc.cr)
biplot(pc.cr)
##Principal Component Analysis##
mydata.rev = mydata.orig #Retrieve 65 Attitudes
mydata.rev[1] <- NULL #remove the first column
#Perform PCA using prcomp() function
pca <- prcomp(mydata.rev)
#plot the variance in each component:
plot(pca, type="l")
# Manipulate data for PCA Analyis
pca.fortify <- fortify(pca)
#Set the # of clusters
k1=3
# K-Means Cluster Analysis
fit <- kmeans(mydata.rev, k1) # k1 cluster solution
# Add group column using k1=4 groups
pca4.dat <- cbind(pca.fortify, group=fit$cluster)
#Plot Kmeans Cluster:
gg2 <- ggplot(pca4.dat) +
geom_point(aes(x=PC1, y=PC2, col=factor(group), text=rownames(pca4.dat)), size=2) +
labs(title = "Visualizing K-Means Clusters Against First Two Principal Components") +
scale_color_brewer(name="", palette = "Set1")
gg2
##Get the Questions that Pertain to PCA1 and PCA2:
options(max.print=1000000) #expand the # of output to 1000000
otherPCA <- princomp(mydata.rev) #computer for PCA again
otherPCA$loadings #get info on all components including component 1 & 2
#another version of factor analysis using fa function
#library(psych)
#factoranalysis <- fa(r = cor(mydata), nfactors =
#                       n.factors, rotate = "oblimin", fm = "pa")
#plot(factoranalysis,labels=names(mydata),cex=.7, ylim=c(-.1,1))
#factor analysis
#install.packages("mclust")
#install.packages("corrplot")
#install.packages("psy")
#install.packages("nFactors")
#install.packages("GPArotation")
#install.packages("ggfortify")
#install.packages("ggplot2")
library(psy)
library(nFactors)
library(MASS)
library(psych)
library(GPArotation)
library(cluster)
library(ggplot2)
library(factoextra)
library(corrplot)
library(lattice)
library(NbClust)
library(ggfortify)
library(ggplot2)
#Clear old data
rm(list=ls())
#Load data using file chooser
mydata <- read.csv(file.choose(), sep = ',')
#Prepare data
mydata.orig = mydata #save orig data copy
mydata <- na.omit(mydata) # listwise deletion of missing
mydata[1] <- NULL #remove the first column
#set seed
set.seed(1)
#find the optimal # of factors
ev <- eigen(cor(mydata)) # get eigenvalues
ap <- parallel(subject=nrow(mydata),var=ncol(mydata), rep=100, cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
n.factors <- 11
# factor analysis
fit <- factanal(mydata,
n.factors,# number of factors to extract
scores=c("regression"),
rotation="none")
# plot factors
load <- fit$loadings[,1:n.factors]
plot(load,type="n") # set up plot
text(load,labels=names(mydata),cex=.7)
#rotate
fit <- factanal(mydata,
n.factors,# number of factors to extract
scores=c("regression"),
rotation="varimax")
# plot factors
load <- fit$loadings[,1:n.factors]
plot(load,type="n") # set up plot
text(load,labels=names(mydata),cex=.7)
#find optimal number of clusters
#using wss
fviz_nbclust(load, kmeans, method = "wss")
#using average silhouette
k.max <- 15
sil <- rep(0, k.max)
# Compute the average silhouette width for
# k = 2 to k = 15
for(i in 2:k.max){
km.res <- kmeans(load, centers = i, nstart = 25)
ss <- silhouette(km.res$cluster, dist(load))
sil[i] <- mean(ss[, 3])
}
# Plot the  average silhouette width
plot(1:k.max, sil, type = "b", pch = 19,
frame = FALSE, xlab = "Number of clusters k")
abline(v = which.max(sil), lty = 2)
# Use optimal no. of clusters in k-means #
k1=4
# Generate K-mean clustering
kfit <- kmeans(load, k1, nstart=25, iter.max=1000,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen"),
trace=FALSE)
#Visualize clusters
fviz_cluster(kfit, data = load, ellipse.type = "convex")+theme_minimal()
fviz_cluster(kfit, data = load, geom = "point",stand = FALSE,
ellipse.type = "norm")
#Get cluster means and median
load_mean <- aggregate(load,by=list(kfit$cluster),FUN=mean)
load_median <- aggregate(load,by=list(kfit$cluster),FUN=median)
# append cluster assignment
loadAssigned <- data.frame(load, kfit$cluster)
# Cluster Plot against 1st 2 principal components
# vary parameters for most readable graph
library(cluster)
clusplot(load, kfit$cluster, color=TRUE, shade=TRUE,labels=2, lines=0)
#Perceptual map
pc.cr <-princomp(load, cor = TRUE) #scale data
summary(pc.cr)
biplot(pc.cr)
##Principal Component Analysis##
mydata.rev = mydata.orig #Retrieve 65 Attitudes
mydata.rev[1] <- NULL #remove the first column
#Perform PCA using prcomp() function
pca <- prcomp(mydata.rev)
#plot the variance in each component:
plot(pca, type="l")
# Manipulate data for PCA Analyis
pca.fortify <- fortify(pca)
#Set the # of clusters
k1=3
# K-Means Cluster Analysis
fit <- kmeans(mydata.rev, k1) # k1 cluster solution
# Add group column using k1=4 groups
pca4.dat <- cbind(pca.fortify, group=fit$cluster)
#Plot Kmeans Cluster:
gg2 <- ggplot(pca4.dat) +
geom_point(aes(x=PC1, y=PC2, col=factor(group), text=rownames(pca4.dat)), size=2) +
labs(title = "Visualizing K-Means Clusters Against First Two Principal Components") +
scale_color_brewer(name="", palette = "Set1")
gg2
##Get the Questions that Pertain to PCA1 and PCA2:
options(max.print=1000000) #expand the # of output to 1000000
otherPCA <- princomp(mydata.rev) #computer for PCA again
otherPCA$loadings #get info on all components including component 1 & 2
#another version of factor analysis using fa function
#library(psych)
#factoranalysis <- fa(r = cor(mydata), nfactors =
#                       n.factors, rotate = "oblimin", fm = "pa")
#plot(factoranalysis,labels=names(mydata),cex=.7, ylim=c(-.1,1))
#factor analysis
#install.packages("mclust")
#install.packages("corrplot")
#install.packages("psy")
#install.packages("nFactors")
#install.packages("GPArotation")
#install.packages("ggfortify")
#install.packages("ggplot2")
library(psy)
library(nFactors)
library(MASS)
library(psych)
library(GPArotation)
library(cluster)
library(ggplot2)
library(factoextra)
library(corrplot)
library(lattice)
library(NbClust)
library(ggfortify)
library(ggplot2)
#Clear old data
rm(list=ls())
#Load data using file chooser
mydata <- read.csv(file.choose(), sep = ',')
#Prepare data
mydata.orig = mydata #save orig data copy
mydata <- na.omit(mydata) # listwise deletion of missing
mydata[1] <- NULL #remove the first column
#set seed
set.seed(1)
#find the optimal # of factors
ev <- eigen(cor(mydata)) # get eigenvalues
ap <- parallel(subject=nrow(mydata),var=ncol(mydata), rep=100, cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
n.factors <- 11
# factor analysis
fit <- factanal(mydata,
n.factors,# number of factors to extract
scores=c("regression"),
rotation="none")
# plot factors
load <- fit$loadings[,1:n.factors]
plot(load,type="n") # set up plot
text(load,labels=names(mydata),cex=.7)
#rotate
fit <- factanal(mydata,
n.factors,# number of factors to extract
scores=c("regression"),
rotation="varimax")
# plot factors
load <- fit$loadings[,1:n.factors]
plot(load,type="n") # set up plot
text(load,labels=names(mydata),cex=.7)
#find optimal number of clusters
#using wss
fviz_nbclust(load, kmeans, method = "wss")
#using average silhouette
k.max <- 15
sil <- rep(0, k.max)
# Compute the average silhouette width for
# k = 2 to k = 15
for(i in 2:k.max){
km.res <- kmeans(load, centers = i, nstart = 25)
ss <- silhouette(km.res$cluster, dist(load))
sil[i] <- mean(ss[, 3])
}
# Plot the  average silhouette width
plot(1:k.max, sil, type = "b", pch = 19,
frame = FALSE, xlab = "Number of clusters k")
abline(v = which.max(sil), lty = 2)
# Use optimal no. of clusters in k-means #
k1=4
# Generate K-mean clustering
kfit <- kmeans(load, k1, nstart=25, iter.max=1000,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen"),
trace=FALSE)
#Visualize clusters
fviz_cluster(kfit, data = load, ellipse.type = "convex")+theme_minimal()
fviz_cluster(kfit, data = load, geom = "point",stand = FALSE,
ellipse.type = "norm")
#Get cluster means and median
load_mean <- aggregate(load,by=list(kfit$cluster),FUN=mean)
load_median <- aggregate(load,by=list(kfit$cluster),FUN=median)
# append cluster assignment
loadAssigned <- data.frame(load, kfit$cluster)
# Cluster Plot against 1st 2 principal components
# vary parameters for most readable graph
library(cluster)
clusplot(load, kfit$cluster, color=TRUE, shade=TRUE,labels=2, lines=0)
#Perceptual map
pc.cr <-princomp(load, cor = TRUE) #scale data
summary(pc.cr)
biplot(pc.cr)
##Principal Component Analysis##
mydata.rev = mydata.orig #Retrieve 65 Attitudes
mydata.rev[1] <- NULL #remove the first column
#Perform PCA using prcomp() function
pca <- prcomp(mydata.rev)
#plot the variance in each component:
plot(pca, type="l")
# Manipulate data for PCA Analyis
pca.fortify <- fortify(pca)
#Set the # of clusters
k1=3
# K-Means Cluster Analysis
fit <- kmeans(mydata.rev, k1) # k1 cluster solution
# Add group column using k1=4 groups
pca4.dat <- cbind(pca.fortify, group=fit$cluster)
#Plot Kmeans Cluster:
gg2 <- ggplot(pca4.dat) +
geom_point(aes(x=PC1, y=PC2, col=factor(group), text=rownames(pca4.dat)), size=2) +
labs(title = "Visualizing K-Means Clusters Against First Two Principal Components") +
scale_color_brewer(name="", palette = "Set1")
gg2
##Get the Questions that Pertain to PCA1 and PCA2:
options(max.print=1000000) #expand the # of output to 1000000
otherPCA <- princomp(mydata.rev) #computer for PCA again
otherPCA$loadings #get info on all components including component 1 & 2
#another version of factor analysis using fa function
#library(psych)
#factoranalysis <- fa(r = cor(mydata), nfactors =
#                       n.factors, rotate = "oblimin", fm = "pa")
#plot(factoranalysis,labels=names(mydata),cex=.7, ylim=c(-.1,1))
##Principal Component Analysis##
mydata.rev = mydata.orig #Retrieve 65 Attitudes
mydata.rev[1] <- NULL #remove the first column
#Perform PCA using prcomp() function
pca <- prcomp(mydata.rev)
#plot the variance in each component:
plot(pca, type="l")
summary(pca)
plot(pc, type='l')
scree.plot(pc,type="line",main ="Scree plot")
plot(pca, type='l')
scree.plot(pca,type="line",main ="Scree plot")
plot(pca, type='l')
scree.plot(pca,type="line",main ="Scree plot")
comp <- data.frame(pca$x[,1:5]) #<-- very important 1:5
# Plot
plot(comp, pch=16, col=rgb(0,0,0,0.5))
pc = princomp(mydata.rev, scores=TRUE, cor = TRUE)
summary(pc)
loadings(pc)
#plot of eigenvalues
plot(pc)
plot(pc, type='l')
scree.plot(pc,type="line",main ="Scree plot")
#biplot
biplot(pc)
#component scores
pc$scores[1:2000,]
pca4.dat
install.packages(mlogit)
install.packages("mlogit")
setwd("~/Documents/Coding/R/R_analytics/R_housing_prediction")
# variable names starting with a number need a "`" to be escaped
fit <- lm(SalePrice ~ (`1stFlrSF` + `2ndFlrSF`) * OverallQual + 1, data = train)
ggplotRegression(fit)
library(ggplot2)
# variable names starting with a number need a "`" to be escaped
fit <- lm(SalePrice ~ (`1stFlrSF` + `2ndFlrSF`) * OverallQual + 1, data = train)
ggplotRegression(fit)
ggplotRegression(fit)
install.packages('ggplotregression')
table(train$Street)
#Exploring real estate data
#apply different techniques for data exploration and prediction
train_data = <- read.csv("train.csv")
#Exploring real estate data
#apply different techniques for data exploration and prediction
train_data <- read.csv("train.csv")
library(corrplot)
correlations <- cor(train[,c(5,6,7,8, 16:25)], use="everything")
corrplot(correlations, method="circle", type="lower",  sig.level = 0.01, insig = "blank")
#import data
train <- read.csv("train.csv")
test <- read.csv("test.csv")
library(corrplot)
correlations <- cor(train[,c(5,6,7,8, 16:25)], use="everything")
corrplot(correlations, method="circle", type="lower",  sig.level = 0.01, insig = "blank")
