io[[4]] <- list("Baked Pizza", "Plate")
#Save the names, parameter types, and features:
param <- list()
param[[1]] <- list(c("Cook", "C"),c("flour brand", "C"),c("prop Water", "P"))
param[[2]] <- list(c("Cook", "C"),c("Ing.Brand", "Cr"),c("amount", "P"),c("prep.Time", "Cr"))
param[[3]] <- list(c("Cook","C"),c("queue", "N"),c("BakeTime", "Cr"))
param[[4]] <- list(c("Waiter","C"),c("queue", "N"))
feat <- list()
feat[[1]] <- list("Density", "toughness", "thickness")
feat[[2]] <- list("Diameter", "Weight", "thickness")
feat[[3]] <- list("temperature", "tenderness", "taste")
feat[[4]] <- list("temperature", "taste", "tenderness","weight", "time")
# Create process map
ss.pMap(steps, inputs, outputs,io, param, feat,sub = "Pizza Process Example")
##Create effect as string
effect <- "Low Quality product"
##Create vector of causes
causes.gr <- c("Measurement", "Material", "Methods", "Environment",
"Manpower", "Machines")
# Create indiviual cause as vector of list
causes <- vector(mode = "list", length = length(causes.gr))
causes[1] <- list(c("Lab error", "Contamination"))
causes[2] <- list(c("Raw Material", "Additive"))
causes[3] <- list(c("Sampling", "Analytical Procedure"))
causes[4] <- list(c("Rust near sample point"))
causes[5] <- list(c("Poor analyst","No guidance"))
causes[6] <- list(c("Leakage", "breakdown"))
# Create Cause and Effect Diagram
ss.ceDiag(effect, causes.gr, causes, sub = "Fish Bone Diagram Example")
# Create gage R and R data for 3 piston rings , 2 operators and each operator 3 measurements per piston
Operator<- factor(rep(1:2, each = 9))
Pistonring<- factor(rep(rep(1:3, each = 3), 2))
run<- factor(rep(1:3, 6))
diameter<-c(1.4727, 1.4206, 1.4754, 1.5083, 1.5739,
1.4341, 1.5517, 1.5483, 1.4614, 1.3337,
1.6078, 1.4767, 1.4066, 1.5951, 1.8419,
1.7087, 1.8259, 1.5444)
pistondata<-data.frame(Operator,Pistonring,run,diameter)
#Load package
library("SixSigma")
#Perform gage R & R
my.rr <- ss.rr(var = diameter, part = Pistonring,
appr = Operator,
data = pistondata,
main = "Six Sigma Gage R&R Measure",
sub = "Piston ring MSA")
#clear old data
rm(list=ls())
#load libraries
library(psy)
library(nFactors)
library(MASS)
library(psych)
library(GPArotation)
library(cluster)
library(ggplot2)
library(factoextra)
library(corrplot)
library(lattice)
library(NbClust)
library(readxl)
#get data
mydata = as.data.frame(read_excel(file.choose()))
#check for missing data
apply(mydata, 2, function(x) any(is.na(x))) #no missing data
mydata[1] <- NULL #remove the first column
set.seed(1)
#get data
mydata = as.data.frame(read_excel(file.choose()))
#Prepare data
mydata.orig = mydata #save orig data copy
#check for missing data
apply(mydata, 2, function(x) any(is.na(x))) #no missing data
#mydata <- na.omit(mydata) # listwise deletion of missing
mydata[1] <- NULL #remove the first column
#set seed
set.seed(1)
#find optimal number of clusters
#using wss
fviz_nbclust(mydata, kmeans, method = "wss")
#using average silhouette
k.max <- 15
sil <- rep(0, k.max)
# Compute the average silhouette width for
# k = 2 to k = 15
for(i in 2:k.max){
km.res <- kmeans(mydata, centers = i, nstart = 25)
ss <- silhouette(km.res$cluster, dist(load))
sil[i] <- mean(ss[, 3])
}
# Plot the  average silhouette width
plot(1:k.max, sil, type = "b", pch = 19,
frame = FALSE, xlab = "Number of clusters k")
abline(v = which.max(sil), lty = 2)
#using average silhouette
k.max <- 15
sil <- rep(0, k.max)
# Compute the average silhouette width for
# k = 2 to k = 15
for(i in 2:k.max){
km.res <- kmeans(mydata, centers = i, nstart = 25)
ss <- silhouette(km.res$cluster, dist(mydata))
sil[i] <- mean(ss[, 3])
}
# Plot the  average silhouette width
plot(1:k.max, sil, type = "b", pch = 19,
frame = FALSE, xlab = "Number of clusters k")
abline(v = which.max(sil), lty = 2)
#number of clusters
nclusters = 3
k <- kmeans(mydata, nclusters, nstart=25, iter.max=1000,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen"),
trace=FALSE)
#Visualize k-means
fviz_cluster(k, data = mydata, ellipse.type = "convex")+theme_minimal()
fviz_cluster(k, data = mydata, geom = "point",stand = FALSE,
ellipse.type = "norm")
set.seed(3)
grp.1 <- round(rlnorm(100, 6)) # With Widget
grp.2 <- round(rlnorm(100, 6)) # Original page
hist(grp.1)
hist(grp.2)
#difference in groups
groups <- c(rep(1, length(grp.1)), rep(2, length(grp.2)))
data <- c(grp.1, grp.2)
diff(by(data, groups, mean))
#simple sample
s <- sample(groups, length(groups), FALSE)
diff(by(data, s, mean))
#perform multiple sampling
max.iter <- 10000
examples <- unlist(lapply(1:max.iter, function(x) {
diff(by(data, sample(groups, length(groups), FALSE), mean))
}))
#plot
test.diff <- diff(by(data, groups, mean))
par(mfrow=c(1,1))
hist(examples, col = "red", breaks = 100, main="Random Permutations", xlab="")
abline(v = test.diff, col = "black", lwd = 4)
#compute p value
# one-tailed test
(sum(examples > test.diff) + 1) / (max.iter + 1)
# two-tailed test
(sum(abs(examples) > abs(test.diff)) + 1) / (max.iter + 1)
#remove old data
rm(list=ls())
#load libraries
library(tidyverse)
library(caret)
library(mlbench)
library(data.table)
library(corrplot)
library(ggplot2)
#load data
hd1 <- read.csv(file.choose()) #load housing header text
hd1 <- read.csv(file.choose())
view(hd1)
View(hd1)
corrplo(cor(hd1),'number')
corrplot(cor(hd1),'number')
View(hd1)
header(hd1)
columns(hd1)
colnames(hd1)
#scatterplot matrix
scatterplot.matrix(~Crim+Zn+Indus+Chas++Nox+Rm++Age+Dis+Rad+Tax+Ptratio+B+Lstat|Medv, data=mtcars,
main="Medv Options")
library(lattice)
#scatterplot matrix
scatterplot.matrix(~Crim+Zn+Indus+Chas++Nox+Rm++Age+Dis+Rad+Tax+Ptratio+B+Lstat|Medv, data=mtcars,
main="Medv Options")
scatterplot.matrix(~Crim+Zn+Indus+Chas+Nox+Rm+Age+Dis+Rad+Tax+Ptratio+B+Lstat|Medv, data=mtcars,
main="Medv Options")
library(car)
scatterplot.matrix(~Crim+Zn+Indus+Chas+Nox+Rm+Age+Dis+Rad+Tax+Ptratio+B+Lstat|Medv, data=mtcars,
main="Medv Options")
scatterplotMatrix(~Crim+Zn+Indus+Chas+Nox+Rm+Age+Dis+Rad+Tax+Ptratio+B+Lstat|Medv, data=mtcars,
main="Medv Options")
View(hd1)
scatterplotMatrix(~Crim+Zn+Indus+Chas+Nox+Rm+Age+Dis+Rad+Tax+Ptratio+B+Lstat|Medv, data=mtcars,
main="Medv Options")
#scatterplot matrix
scatterplotMatrix(~Zn+Indus+Chas+Nox+Rm+Age+Dis+Rad+Tax+Ptratio+B+Lstat|Medv, data=mtcars,
main="Medv Options")
#remove old data
rm(list=ls())
#load libraries
library(tidyverse)
library(caret)
library(mlbench)
library(data.table)
library(corrplot)
library(ggplot2)
#load data
gr <- read.csv(file.choose()) #load housing header text
View(gr)
View(gr)
#regression model
#remove old data
rm(list=ls())
#load libraries
library(data.table)
library(corrplot)
library(ggplot2)
library(dplyr)
#read data
df <- read.table(file.choose(), header = TRUE)
df <- read.dta(file.choose(), header = TRUE)
df <- read.dta(file.choose())
#remove old data
rm(list=ls())
#load libraries
library(tidyverse)
library(caret)
library(mlbench)
library(data.table)
library(corrplot)
library(ggplot2)
#load data
df <- read.csv(file.choose())
View(df)
#clear old data
rm(list=ls())
#load libraries
library(ggplot2)
library(corrplot)
library(tidyverse)
#load data
df <- read.csv(file.choose(),sep=";")
df <- read.csv(file.choose(),sep=",")
View(df)
df <- read.csv(file.choose())
View(df)
country_count <- df %>%
group_by(X_country) %>%
n_distinct(how_hateful)
country_count <- df %>%
group_by(X_country) %>%
n_distinct(how_hateful, na.rm = TRUE)
glimpse(df)
country_count <- df %>%
group_by(X_country) %>%
n_distinct(how_hateful, na.rm = TRUE)
country_count <- df %>%
group_by(X_country) %>%
summarise(count = n_distinct(how_hateful))
View(country_count)
country_count <- df %>%
group_by(X_country) %>%
group_by(how_hateful)
View(country_count)
country_count <- df %>%
group_by(X_country) %>%
group_by(how_hateful) %>%
select(X_country, how_hateful)
View(country_count)
ggplot(data=country_count, aes(x=X_country, y=how_hateful)) +
geom_bar(stat="identity")
ggplot(data=country_count, aes(x=X_country, y=how_hateful)) +
geom_point()
country_count <- df %>%
group_by(X_country) %>%
summarise(count = n_distinct(how_hateful)) %>%
select(X_country, how_hateful, count)
country_count <- df %>%
group_by(X_country) %>%
group_by(how_hateful)
summarise(count = n_distinct(how_hateful)) %>%
select(X_country, how_hateful, count)
country_count <- df %>%
group_by(X_country) %>%
group_by(how_hateful)
summarise(count = count(how_hateful)) %>%
select(X_country, how_hateful, count)
country_count <- df %>%
group_by(X_country) %>%
group_by(how_hateful) %>%
summarise(count = count(how_hateful)) %>%
select(X_country, how_hateful, count)
country_count <- df %>%
group_by(X_country) %>%
summarise(count = n_distinct(how_hateful)) %>%
select(X_country, how_hateful, count)
country_count <- df %>%
group_by(X_country) %>%
summarise(count = n_distinct(how_hateful))
View(country_count)
country_count <- df %>%
group_by(X_country) %>%
summarise(count = n_distinct(how_hateful)) %>%
select(X_country, how_hateful, count)
country_count <- df %>%
group_by(X_country, how_hateful)
country_count <- df %>%
group_by(X_country, how_hateful) %>%
summarise(count = n_distinct(how_hateful))
View(country_count)
country_count <- df %>%
group_by(X_country, how_hateful) %>%
summarise(count = n_distinct(how_hateful)) %>%
select(X_country, how_hateful, count)
country_count <- df %>%
group_by(X_country, how_hateful) %>%
summarise(count = n(how_hateful)) %>%
select(X_country, how_hateful, count)
country_count <- df %>%
group_by(X_country, how_hateful) %>%
summarise(count = n()) %>%
select(X_country, how_hateful, count)
View(country_count)
ggplot(country_count, aes(x = X_country, y = how_hateful, fill = count)) +
geom_point(shape = 21)
ggplot(country_count, aes(x = X_country, y = how_hateful, size = count)) +
geom_point(shape = 21)
ggplot(country_count, aes(x = X_country, y = how_hateful, size = count))
ggplot(data=country_count, aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity")+
geom_text(aes(y=label_ypos, label=len), vjust=1.6,
color="white", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
ggplot(data=country_count, aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity")+
geom_text(aes(y=count, label=len), vjust=1.6,
color="white", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
ggplot(data=country_count, aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity")+
geom_text(aes(y=count, label=country), vjust=1.6,
color="white", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
ggplot(data=country_count, aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity")+
geom_text(aes(y='count', label='country'), vjust=1.6,
color="white", size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
ggplot(data=country_count, aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity") +  theme_minimal()
ggplot(data=country_count, aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity") + scale_fill_brewer(palette="Paired")+  theme_minimal()
ggplot(data=country_count, aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity") + scale_fill_brewer(palette="Paired")+  theme_minimal() +
geom_text(aes(y="Count", label="Country"), vjust=1.6,
color="white", size=3.5)
ggplot(data=country_count, aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity") + scale_fill_brewer(palette="Paired")+  theme_minimal() +
opts(title="width = .5") + labs(x="Country", y="Count")
ggplot(data=country_count, aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity", position="identity") + scale_fill_brewer(palette="Paired") + theme_minimal() +
labs(x="Country", y="Count")
ggplot(data=country_count, aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity", position = position_dodge(width = 0.9)) + scale_fill_brewer(palette="Paired") + theme_minimal() +
labs(x="Country", y="Count")
ggplot(data=country_count, aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity", position="identity") + scale_fill_brewer(palette="Paired") + theme_minimal() +
labs(x="Country", y="Count")
ggplot(data=country_count, aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity") + scale_fill_brewer(palette="Paired") + theme_minimal() +
labs(x="Country", y="Count")
ggplot(data=country_count, aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity", width=1) + scale_fill_brewer(palette="Paired") + theme_minimal() +
labs(x="Country", y="Count")
ggplot(data=country_count, aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity", width=1.5) + scale_fill_brewer(palette="Paired") + theme_minimal() +
labs(x="Country", y="Count")
ggplot(data=country_count, aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity", position="stack", width=1) + scale_fill_brewer(palette="Paired") + theme_minimal() +
labs(x="Country", y="Count")
ggplot(data=country_count, aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity", position = position_dodge(width=0.5)) + scale_fill_brewer(palette="Paired") + theme_minimal() +
labs(x="Country", y="Count")
country_count <- df %>%
group_by(X_country, how_hateful) %>%
summarise(count = n()) %>%
select(X_country, how_hateful, count) +
ggplot(data=country_count, aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity") + scale_fill_brewer(palette="Paired") + theme_minimal() +
labs(x="Country", y="Count")
country_count <- df %>%
group_by(X_country, how_hateful) %>%
summarise(count = n()) %>%
select(X_country, how_hateful, count) + ggplot(aes(x= X_country, y=count, fill=how_hateful)) +
geom_bar(stat="identity") + scale_fill_brewer(palette="Paired") + theme_minimal() +
labs(x="Country", y="Count")
country_most_hate <- country_count %>%
filter(how_hateful = "very_hateful") %>%
sort(desc())
country_most_hate <- country_count %>%
filter(how_hateful == "very_hateful") %>%
sort(desc())
country_most_hate <- country_count %>%
filter(how_hateful == "very_hateful") %>%
sort(desc(count))
country_most_hate <- country_count %>%
filter(how_hateful == "very_hateful")
View(country_most_hate)
country_most_hate <- country_count %>%
filter(how_hateful == "very_hateful") %>%
arrange(desc(count)) %>%
select(X_country,count)
View(country_most_hate)
View(country_most_hate)
country_hate_count <- country_count %>%
group_by(X_country) %>%
summarize(total_hate = sum(count))
View(country_most_hate)
View(country_hate_count)
country_most_hate <- country_count %>%
filter(how_hateful == "very_hateful")
View(country_most_hate)
View(country_most_hate)
country_most_hate <- country_count %>%
filter(how_hateful == "very_hateful") %>%
select(X_country, count)
View(country_most_hate)
very_hateful_dist <- country_most_hate %>%
inner_join(country_hate_count, "X_country") %>%
mutate(hate_ratio = count / total_hate)
View(very_hateful_dist)
very_hateful_dist <- country_most_hate %>%
inner_join(country_hate_count, "X_country") %>%
mutate(hate_ratio = count / total_hate) %>%
arrange(desc(hate_ratio)) %>%
select(X_country, hate_ratio)
View(very_hateful_dist)
country_least_hate <- country_count %>%
filter(how_hateful == "not_hateful_at_all") %>%
select(X_country, count)
least_hateful_dist <- country_least_hate %>%
inner_join(country_hate_count, "X_country") %>%
mutate(least_hate_ratio = count / total_hate) %>%
arrange(desc(least_hate_ratio)) %>%
select(X_country, least_hate_ratio)
#clear old data
rm(list=ls())
#load libraries
library(ggplot2)
library(corrplot)
library(tidyverse)
#load data
df <- read.csv(file.choose())
View(df)
#check for missing data
missing_data <- apply(df, 2, function(x) any(is.na(x))) #no missing data
View(missing_data)
View(missing_data)
View(df)
#clear old data
rm(list=ls())
#load libraries
library(ggplot2)
library(corrplot)
library(tidyverse)
library(forecast)
#load data
df <- read.csv(file.choose())
#View(df)
View(df)
#load data
df <- read.csv(file.choose(), sep=";")
View(df)
View(df)
#clear old data
rm(list=ls())
#load libraries
library(ggplot2)
library(corrplot)
library(tidyverse)
library(lubridate)
library(data.table)
#set working directory
setwd("/Users/edima/Documents/Coding/R/R_analytics/item_sales/")
#load data
file_names = c(
"item_categories.csv",
"items.csv",
"sales_train.csv",
"shops.csv",
"test.csv"
)
#clean filenames
filenames <- gsub("\\.csv$","", list.files(pattern="\\.csv$"))
#load the files
for(i in filenames){
assign(i, read.csv(paste(i, ".csv", sep="")))
}
item_categories.backup <- item_categories
item_categories.backup <- items
shops.backup <- shops
missing_data <- apply(item_categories, 2, function(x) any(is.na(x)))
missing_data <- apply(items, 2, function(x) any(is.na(x)))
missing_data <- apply(shops, 2, function(x) any(is.na(x)))
missing_data_item_cat <- apply(item_categories, 2, function(x) any(is.na(x)))
missing_data_items <- apply(items, 2, function(x) any(is.na(x)))
missing_data_shops <- apply(shops, 2, function(x) any(is.na(x)))
consolidated = sales_train %>%
left_join(items, by=c("item_id"))
###Since we are not using name,will remove item name
consolidated$item_name=NULL
###is there any Missing obesrvation
colSums(is.na(consolidated))
consolidated$date=dmy(consolidated$date)
consolidated$month=month(consolidated$date)
consolidated$year=year(consolidated$date)
consolidated$day=weekdays(consolidated$date)
consolidated$day=as.factor(consolidated$day)
consolidated$month=as.factor(consolidated$month)
consolidated$year=as.factor(consolidated$year)
glimpse(consolidated)
