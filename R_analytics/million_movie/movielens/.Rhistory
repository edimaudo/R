library(tidyverse)
#sentiment analysis
positive_words <- hcr %>%
filter(sentiment == "positive") %>%
select(tweet_info,sentiment)
negative_words <- hcr %>%
filter(sentiment == "negative") %>%
select(tweet_info,sentiment)
test <- hcr %>%
sample_frac(size = 0.2, replace = FALSE, weight = NULL, .env = NULL) %>%
select(tweet_info,sentiment)
wordsInfo = rbind(positive_words, negative_words, test)
matrix= create_matrix(wordsInfo[,1], language="english",
removeStopwords=FALSE, removeNumbers=TRUE,
stemWords=FALSE)
library(RTextTools)
library(e1071)
library(tm)
library(SnowballC)
matrix= create_matrix(wordsInfo[,1], language="english",
removeStopwords=FALSE, removeNumbers=TRUE,
stemWords=FALSE)
mat = as.matrix(matrix)
classifier = naiveBayes(mat[1:10,], as.factor(wordsInfo[1:10,2]) )
# test the validity
predicted = predict(classifier, mat[11:15,]); predicted
table(wordsInfo[11:15, 2], predicted)
recall_accuracy(wordsInfo[11:15, 2], predicted)
#libraries
library(corrplot)
library(tidyverse)
library(lubridate)
# remove old data
rm(list=ls())
training <- read.csv(file.choose())
test <- read.csv(file.choose())
View(test)
View(training)
glimpse(unique(training$toxic))
glimpse(unique(training$severe_toxic))
glimpse(unique(training$obscene))
glimpse(unique(training$threat))
glimpse(unique(training$insult))
training.orig <- training
test.orig <- test
glimpse(unique(training$identity_hate))
#text cleaning function
text.clean = function(x)                    # text data
{
x  =  gsub("<.*?>", " ", x)               # regex for removing HTML tags
x  =  iconv(x, "latin1", "ASCII", sub="") # Keep only ASCII characters
x  =  gsub("[^[:alnum:]]", " ", x)        # keep only alpha numeric
x  =  tolower(x)                          # convert to lower case characters
x  =  removeNumbers(x)                    # removing numbers
x  =  stripWhitespace(x)                  # removing white space
x  =  gsub("^\\s+|\\s+$", "", x)          # remove leading and trailing white space
return(x)
}
training$comment_text <- text.clean(training$comment_text)
library(tm)
library(SnowballC)
library(wordcloud)
library(topicmodels)
training$comment_text <- text.clean(training$comment_text)
test$comment_text <- text.clean(test$comment_text)
View(training)
#remove all data
rm(list=ls())
#load libraries or install libraries if you do not have it
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrplot)
library(neuralnet)
library(GGally)
library(data.table)
library(lubridate)
#read data
suppressWarnings(training <- fread(file.choose(), nrows = 1000000))
library(Matrix)
library(arules)
library(arulesViz)
#load training data again
#product columns
col_nor <- c('ind_ahor_fin_ult1',
'ind_aval_fin_ult1',
'ind_cco_fin_ult1',
'ind_cder_fin_ult1',
'ind_cno_fin_ult1',
'ind_ctju_fin_ult1',
'ind_ctma_fin_ult1',
'ind_ctop_fin_ult1',
'ind_ctpp_fin_ult1',
'ind_deco_fin_ult1',
'ind_deme_fin_ult1',
'ind_dela_fin_ult1',
'ind_ecue_fin_ult1',
'ind_fond_fin_ult1',
'ind_hip_fin_ult1',
'ind_plan_fin_ult1',
'ind_pres_fin_ult1',
'ind_reca_fin_ult1',
'ind_tjcr_fin_ult1',
'ind_valo_fin_ult1',
'ind_viv_fin_ult1',
'ind_nomina_ult1',
'ind_nom_pens_ult1',
'ind_recibo_ult1')
col_english = c("savings_account", "guarantees", "current_account", "derivada_account", "payroll_account",
"junior_account", "mas_particular_account", "particular_account", "particular_Plus_account",
"short_term_deposit",
"med_dep", "long_term_deposit", "e_account", "funds", "mortgage", "pensions",
"loans", "taxes", "credit_card", "securities", "home_account", "payroll", "pension",
"direct_debit")
setnames(training, old=col_nor , new=col_english)
set.seed(123) #for reproducibility
trainmba <- as.matrix(training[,25:48])
trainmba[is.na(trainmba[,22]),22] <- 0
trainmba[is.na(trainmba[,23]),23] <- 0
mbarules <- apriori(data = trainmba, parameter = list(supp = 0.005, conf = 0.75, minlen = 2))
summary(mbarules)
#inspect top rules by confidence
inspect(sort(mbarules, by = "confidence")[1:10])
#inspect top rules by lift
inspect(sort(mbarules, by = "lift")[1:10])
plot(head(sort(mbarules, by = "lift"), n=10), method="graph", control=list(cex=1))
plot(head(sort(mbarules, by = "lift"), n=10), method="graph", control=list(cex=1), col = rainbow(5))
plot(head(sort(mbarules, by = "lift"), n=10), method="graph", control=list(cex=1), col = "#EE0606FF")
plot(head(sort(mbarules, by = "lift"), n=10), method="graph", control=list(cex=1), c("#66CC6680", "#9999CC80"))
plot(head(sort(mbarules, by = "lift"), n=10), method="graph", control=list(cex=1),
nodeColors = c("#66CC6680", "#9999CC80"))
plot(head(sort(mbarules, by = "lift"), n=10), method="graph", control=list(cex=1),
nodeColors = c("#E2E2E2FF", "#9999CC80"))
plot(head(sort(mbarules, by = "lift"), n=10), method="graph", control=list(cex=1),
nodeColors = c("#E2E2E2FF", "#BCBCBCFF"))
plot(head(sort(mbarules, by = "lift"), n=10), method="graph", control=list(cex=5),
nodeColors = c("#E2E2E2FF", "#BCBCBCFF"))
plot(head(sort(mbarules, by = "lift"), n=10), method="graph", control=list(cex=2),
nodeColors = c("#E2E2E2FF", "#BCBCBCFF"))
plot(head(sort(mbarules, by = "lift"), n=10), method="graph", control=list(cex=1.5),
nodeColors = c("#E2E2E2FF", "#BCBCBCFF"))
plot(head(sort(mbarules, by = "lift"), n=10), method="graph", control=list(cex=1),
nodeColors = c("#E2E2E2FF", "#BCBCBCFF"))
plot(head(sort(mbarules, by = "confidence"), n=10), method="graph", control=list(cex=1))
#income by household type
ggplot(training,aes(x = segmento,y = renta,fill=segmento))+
ggtitle("Gross income of the household by Segment")+
geom_boxplot(na.rm=TRUE)+
scale_y_log10()+
scale_fill_discrete(name = "Segmentation",
labels = c("01 - VIP", "02 - Individuals","03 - College Graduated","04 - Unnoted"))+
theme_classic()
#explore bank products
product <- training[,25:48]
product_corr <- cor(product)
corrplot(product_corr, method="number", tl.cex = 1)
#how many products do customers own
total_products<-rowSums(product, na.rm = TRUE)
table(total_products)
barplot(table(total_products), xlab="Number of Products", las=3)
#which product is popular
total_products1<-colSums(product)
names(total_products1) <- col_english
# names(total_products1)<-c("savings", "guarantee", "current", "derivada", "payroll_acc",
#                           "junior", "mas particular", "particular", "particular Plus", "short_dep",
#                           "med-dep", "long_dep", "e_account", "funds", "mortgage", "pensions",
#                           "loans", "taxes", "creditcard",
#                           "securities", "home", "payroll", "pension_last",
#                           "direct_debit")
barplot(total_products1)
barplot(total_products1,
main = "Number of customers vs account type",
xlab = "Number of customers",
ylab = "Account type",
names.arg = col_english,
horiz = TRUE)
barplot(total_products1,
main = "Number of customers vs account type",
xlab = "Number of customers",
ylab = "Account type",
names.arg = col_english,
horiz = TRUE,cex.names=0.8)
barplot(total_products1,
main = "Number of customers vs account type",
xlab = "Number of customers",
ylab = "Account type",
names.arg = col_english,
horiz = FALSE,cex.names=0.5)
barplot(total_products1,
main = "Number of customers vs account type",
xlab = "Number of customers",
ylab = "Account type",
names.arg = col_english,
horiz = FALSE,cex.names=0.5)
text(x=bp[,1], y=-1, adj=c(1, 1), total_products1, cex=0.8, srt=45, xpd=TRUE)
barplot(total_products1,
main = "Number of customers vs account type",
xlab = "Number of customers",
ylab = "Account type",
names.arg = col_english,
horiz = FALSE,cex.names=0.5)
text(x=total_products1[,1], y=-1, adj=c(1, 1), total_products1, cex=0.8, srt=45, xpd=TRUE)
ggplot(data=training, aes(fecha_dato)) +
geom_bar(
aes(fill=factor(ind_empleado))
) +
labs(title="Monthly Customer Number (Employee index)") +
labs(x="Date", y="Number of Customers") +
scale_fill_discrete(name = "Employee index",
labels = c("Active","Ex employed","Filial","Pasive"))+
theme_classic()
#customer type
ggplot(data=training, aes(fecha_dato)) +
geom_bar(
aes(fill=indrel_1mes)
) +
labs(title="Monthly Customer Number (Customer type)") +
labs(x="Date", y="Number of Customers") +
scale_fill_discrete(name = "Customer type",
labels = c("First/Primary", "Co-owner",
"Former Primary","Former Co-owner","Potential","Unnoted"))+
theme_classic()
num_customers <- ggplot(data=training, aes(fecha_dato)) +
geom_bar(aes(fill=tiprel_1mes)) +
labs(title="Monthly Customer Number (relation type)") +
labs(x="Date", y="Number of Customers") +
scale_fill_discrete(
name="Customer relation  ",
labels = c("Active", "Inactive","N","Former","Potential")) + theme_classic()
print(num_customers)
#customer vs. sex vs. age
customer_sex_age <- ggplot(training, aes(x=sexo)) +
geom_bar(aes(fill=factor(age))) +
xlab("Sex") + ylab("Number of Customers") +
ggtitle("Customer Sex and Age") +
scale_fill_discrete(name = "Age")+
theme_classic()
print (customer_sex_age)
#customer sex and segmentation
customer_sex_segment <- ggplot(data=training, aes(x=sexo)) +
geom_bar(
aes(fill=segmento)
) +
labs(title="Customer Sex and Segmentation") +
labs(x="Age", y="Number of Customers") +
scale_fill_discrete(name = "Segmentation",
labels = c("01 - VIP", "02 - Individuals","03 - College Graduated","04 - Unnoted"))+
theme_classic()
print (customer_sex_segment)
#channel
DT1 <- training %>%
group_by(canal_entrada) %>%
summarise(count_by_ce=n())  %>%
select(canal_entrada,count_by_ce)
DT1 <- data.frame(DT1)
DT1 <- arrange(DT1,-count_by_ce)
ggplot(DT1, aes(x=reorder(canal_entrada, count_by_ce),y=count_by_ce))  +
geom_bar(stat="identity",aes(fill=canal_entrada)) +
coord_flip() +
xlab("channel") + ylab("Number of Customers") +
ggtitle("Customer Channel") +
theme_classic()
print (customer_channel)
#income by household type
ggplot(training,aes(x = segmento,y = renta,fill=segmento))+
ggtitle("Gross income of the household by Segment")+
geom_boxplot(na.rm=TRUE)+
scale_y_log10()+
scale_fill_discrete(name = "Segmentation",
labels = c("01 - VIP", "02 - Individuals","03 - College Graduated","04 - Unnoted"))+
theme_classic()
#customer residence
DT1 <- DT %>%
group_by(pais_residencia) %>%
summarise(count_by_res=n())
DT1 <- data.frame(DT1)
DT1 <- arrange(DT1,-count_by_res)
DT1$Country <- ifelse(!(DT1$pais_residencia %in% c('ES','UN','FR','AR',
'DE','GB','US','CO')),'Other',DT1$pais_residencia)
DT1$Resident <- ifelse(DT1$pais_residencia=='ES','ES',ifelse(DT1$pais_residencia=='UN','UN','Other'))
customer_residence <- ggplot(data=DT1[ which(!DT1$Country=='ES') , ],
aes(x=reorder(Country, count_by_res), y=count_by_res)) +
geom_bar(stat="identity",
aes(fill=Country)
) +
coord_flip() +
labs(title="Customer's Country residence") +
labs(x="Country", y="Number of Customers") +
theme_classic()
print (customer_residence)
#customer type
ggplot(data=training, aes(fecha_dato)) +
geom_bar(
aes(fill=indrel_1mes)
) +
labs(title="Monthly Customer Number (Customer type)") +
labs(x="Date", y="Number of Customers") +
scale_fill_discrete(name = "Customer type",
labels = c("First/Primary", "Co-owner",
"Former Primary","Former Co-owner","Potential","Unnoted"))+
theme_classic()
#active vs inactive
num_active <- ggplot(data=training, aes(fecha_dato)) +
geom_bar(
aes(fill=factor(ind_actividad_cliente))
) +
labs(title="Monthly Customer Number (Activity)") +
labs(x="Date", y="Number of Customers") +
scale_fill_discrete(name = "Activity index",
labels = c("Active", "Inactive"))+
theme_classic()
print (num_active)
#age breakdown by segments
training$segmento <- factor(training$segmento, labels = c("Other", "VIP",
"Individuals", "Graduates"))
ggplot(training, aes(x=age, fill=factor(segmento))) +
geom_bar() +
facet_grid(".~segmento") +
scale_fill_manual("Customer Segmentation", values=c("#ffffb2", "#fecc5c", "#fd8d3c", "#e31a1c")) +
theme_classic() +
theme(legend.position="bottom") +
scale_y_continuous("Frequency")
training$age<-as.numeric(as.character(training$age))
ggplot(training, aes(x=age)) +
stat_count(width=1, position="stack") +
ggtitle("Age Histogram") + theme_classic()
#customer residence
DT1 <- DT %>%
group_by(pais_residencia) %>%
summarise(count_by_res=n())
DT1 <- data.frame(DT1)
DT1 <- arrange(DT1,-count_by_res)
#income by channel
ggplot(training,aes(x = canal_entrada,y = renta,fill=canal_entrada))+
ggtitle("Gross income of the household by Channel")+
geom_boxplot(na.rm=TRUE)+
scale_y_log10()+
scale_fill_discrete(name = "Channel") +
theme_classic()
barplot(total_products1,
main = "Number of customers vs account type",
xlab = "Number of customers",
ylab = "Account type",
names.arg = col_english,
horiz = FALSE,cex.names=0.5,las=2,col = "skyblue",main = "After")
op <- par(mar=c(11,4,4,2))
rm(op)
barplot(total_products1,
main = "Number of customers vs account type",
xlab = "Number of customers",
ylab = "Account type",
names.arg = col_english,
horiz = FALSE,cex.names=0.5,las=2,col = "skyblue")
op <- par(mar=c(11,4,4,2))
rm(op)
barplot(total_products1,
main = "Number of customers vs account type",
xlab = "Number of customers",
ylab = "Account type",
names.arg = col_english,
horiz = FALSE,cex.names=0.8,las=2,col = "skyblue")
op <- par(mar=c(11,4,4,2))
rm(op)
barplot(total_products1,
main = "Account popularity",
xlab = "Type of Account",
ylab = "Count",
names.arg = col_english,
horiz = FALSE,cex.names=0.8,las=2,col = "skyblue")
op <- par(mar=c(110,4,4,2))
rm(op)
barplot(total_products1,
main = "Account popularity",
xlab = "Type of Account",
ylab = "Count",
names.arg = col_english,
horiz = FALSE,cex.names=0.8,las=2,col = "skyblue")
op <- par(mar=c(11,40,4,2))
rm(op)
barplot(total_products1,
main = "Account popularity",
xlab = "Type of Account",
ylab = "Count",
names.arg = col_english,
horiz = FALSE,cex.names=0.8,las=2,col = "skyblue")
op <- par(mar=c(11,14,4,2))
rm(op)
barplot(table(total_products), xlab="Number of Products", las=3, ylab = "Count",col = "skyblue")
barplot(total_products1,
main = "Account popularity",
xlab = "Type of Account",
ylab = "Count",
names.arg = col_english,
horiz = FALSE,cex.names=0.8,las=2,col = "skyblue")
barplot(total_products1,
main = "Account popularity",
ylab = "Count",
names.arg = col_english,
horiz = FALSE,cex.names=0.8,las=2,col = "skyblue")
#remove all data
rm(list=ls())
#load libraries or install libraries if you do not have it
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(corrplot)
library(neuralnet)
library(GGally)
library(data.table)
library(lubridate)
#read data
suppressWarnings(training <- fread(file.choose(), nrows = 1000000))
barplot(total_products1,
main = "Account popularity",
ylab = "Count",
names.arg = col_english,
horiz = FALSE,cex.names=0.8,las=2,col = "skyblue")
op <- par(mar=c(4,4,4,2))
rm(op)
product <- training[,25:48]
total_products<-rowSums(product, na.rm = TRUE)
total_products1<-colSums(product)
barplot(total_products1,
main = "Account popularity",
ylab = "Count",
names.arg = col_english,
horiz = FALSE,cex.names=0.8,las=2,col = "skyblue")
op <- par(mar=c(4,4,4,2))
rm(op)
col_english = c("savings_account", "guarantees", "current_account", "derivada_account", "payroll_account",
"junior_account", "mas_particular_account", "particular_account", "particular_Plus_account",
"short_term_deposit",
"med_dep", "long_term_deposit", "e_account", "funds", "mortgage", "pensions",
"loans", "taxes", "credit_card", "securities", "home_account", "payroll", "pension",
"direct_debit")
barplot(total_products1,
main = "Account popularity",
ylab = "Count",
names.arg = col_english,
horiz = FALSE,cex.names=0.8,las=2,col = "skyblue")
op <- par(mar=c(4,4,4,2))
rm(op)
#remove all data
rm(list=ls())
#load libraries
library(tidyverse)
library(lubridate)
library(stringr)
library(ggplot2)
library(data.table)
library(colorspace)
#list of files
file_names = c(
"genome_scores.csv",
"genome_tags.csv",
"link.csv",
"movie.csv",
"rating.csv",
"tag.csv"
)
#update working directory
setwd("/Users/edima/Documents/Coding/R/R_analytics/million_movie/movielens/")
#clean filenames
filenames <- gsub("\\.csv$","", list.files(pattern="\\.csv$"))
#load the files
for(i in filenames){
assign(i, read.csv(paste(i, ".csv", sep="")))
}
# First, simplify movie genres
movie$genres <- ifelse(grepl('\\|', movie$genres), "Multiple", movie$genres)
# Merge ratings and movie datasets
rating_merged <- merge(ratings, movie, by="movieId")
# Use ggplot to make a bar graph
ggplot(rating_merged,aes(x=factor(genres),y=rating), color=factor(vs)) +
stat_summary(fun.y=mean,position=position_dodge(),geom="bar") +
labs(x = "Genres", y = "Mean ratings",
title = "Mean ratings by genres") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
movies_per_year <- movies_df %>%
na.omit() %>% # omit missing values
select(movieId, year) %>% # select columns we need
group_by(year) %>% # group by year
summarise(count = n())  %>% # count movies per year
arrange(year)
print(movies_per_year)
#data exploration
# Number of movies per year/decade
movies_per_year <- movie %>%
na.omit() %>% # omit missing values
select(movieId, year) %>% # select columns we need
group_by(year) %>% # group by year
summarise(count = n())  %>% # count movies per year
arrange(year)
print(movies_per_year)
View(movie)
ratings_df <- rating %>%
mutate(timestamp = as_datetime(timestamp))
movies_df <- movie %>%
# trim whitespaces
mutate(title = str_trim(title)) %>%
# split title to title, year
extract(title, c("title_tmp", "year"), regex = "^(.*) \\(([0-9 \\-]*)\\)$", remove = F) %>%
# for series take debut date
mutate(year = if_else(str_length(year) > 4, as.integer(str_split(year, "-", simplify = T)[1]), as.integer(year))) %>%
# replace title NA's with original title
mutate(title = if_else(is.na(title_tmp), title, title_tmp)) %>%
# drop title_tmp column
select(-title_tmp)  %>%
# generic function to turn (no genres listed) to NA
mutate(genres = if_else(genres == "(no genres listed)", `is.na<-`(genres), genres))
tags_df <- tag %>%
mutate(timestamp = as_datetime(timestamp))
