install.packages("shinydashboard")
runApp('Documents/Coding/R/shiny/shinyRevenue')
install.packages("lubridate")
install.packages("tidyverse")
install.packages("foreign")
#Clear old data
rm(list=ls())
#use filechooser to select csv file
mydata <- read.csv(file.choose(), sep = ',')
head(mydata)
Summary(mydata)
summary(mydata)
install.packages(c("nycflights13", "gapminder", "Lahman"))
library(tidyverse)
ggplot(dota = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(dota = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
data <- mpg
ggplot(dota = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
filter(mpg, cyl = 8)
filter(mpg, cyl == 8)
filter(diamond, carat > 3)
View(data)
data <- diamonds
filter(diamonds, carat > 3)
data <- mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
nrow(data)
ncol(data)
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = hwy, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = disp<5)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = displ<5)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
gplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy))
library(nycflights13)
library(tidyverse)
nycflights13::flights
filter(flights, month == 1, day == 1)
jan1 <- filter(flights, month == 1, day == 1)
View(jan1)
View(jan1)
flewHouston <- filter(flights, dest == "IOH"| dest=="HOU")
View(flewHouston)
arrivalDelay <- filter(flights, arr_delay >= 2)
View(arrivalDelay)
operatedBy <- filter(flights,  carrier %in% c('AA','DL','UA'))
departedIn <- filter(flights, month %in% c(7,8,9))
arrivednotLeave <- filter(flights, arr_delay > 2 & dep_delay == 0)
View(arrivalDelay)
View(arrivednotLeave)
delayMadeUp <- filter(flights, dep_delay >=1 & arr_delay < -30)
View(delayMadeUp)
depart126 <- filter(flights, dep_time >= 000 & dep_time <= 600)
View(depart126)
depart126 <- filter(flights, dep_time >= '000' & dep_time <= '600')
View(depart126)
depart126 <- filter(flights, dep_time = 000 )
View(depart126)
depart126 <- filter(flights, dep_time == 000 )
View(depart126)
depart126 <- filter(flights, dep_time == 001 )
View(depart126)
depart126 <- filter(flights, dep_time == 600 )
View(depart126)
View(mydata)
View(jan1)
depart126 <- filter(flights, dep_time >= 000  & dep_time < 601)
View(depart126)
View(jan1)
View(flewHouston)
#Syngenta
#libraries
library(plyr)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(caret)
library(MASS)
library(randomForest)
library(party)
#clear old data
rm(list=ls())
#load data
genetic_data <- read.csv(file.choose())
soil_data <- read.csv(file.choose())
weather_data <- read.csv(file.choose())
validation_performance <- read.csv(file.choose())
summary(genetic_data)
summary(soil_data)
summary(weather_data)
summary(validation_performance)
View(soil_data)
View(weather_data)
View(genetic_data)
genetic_data.orig <- genetic_data
soil_data.orig <- soil_data
weather_data.orig <- weather_data
validation_performance.orig <- validation_performance
corrplot(soildata[,4:11])
corrplot(soil_data[,4:11])
#libraries
library(ggplot2)
library(corrplot)
library(lattice)
library(dplyr)
library(tidyr)
library(LogicReg)
library(caret)
library(readxl)
#==========================
#logistic regression
#==========================
#Clear old data
rm(list=ls())
mydata <- read_excel(file.choose())
#summary
summary(mydata)
#Prepare data
mydata.orig = mydata #save orig data copy
mydata <- na.omit(mydata) # listwise deletion of missing
#set seed
set.seed(1)
View(mydata)
??dummy
#libraries
library(ggplot2)
library(corrplot)
library(lattice)
library(dplyr)
library(tidyr)
library(LogicReg)
library(caret)
library(readxl)
#==========================
#logistic regression
#==========================
#Clear old data
rm(list=ls())
mydata <- read_excel(file.choose())
#summary
summary(mydata)
#Prepare data
mydata.orig = mydata #save orig data copy
mydata <- na.omit(mydata) # listwise deletion of missing
#set seed
set.seed(1)
corrplot(mydata, method="number")
#libraries
library(ggplot2)
library(corrplot)
library(lattice)
library(dplyr)
library(tidyr)
library(LogicReg)
library(caret)
library(readxl)
corrplot(mydata, method="number")
View(mydata)
View(mydata)
splitIndex <- createDataPartition(mydata$Default, p = .80,list = FALSE, times = 1)
trainSplit <- data[ splitIndex,]
testSplit <- data[-splitIndex,]
print(table(trainSplit$Default))
splitIndex <- createDataPartition(mydata$Default, p = .80,list = FALSE, times = 1)
trainSplit <- mydata[ splitIndex,]
testSplit <- mydata[-splitIndex,]
print(table(trainSplit$Default))
#logistic regression
ctrl <- trainControl(method = "cv", number = 5)
modelglm <- train(Default ~. , data = trainSplit, method = "glm", trControl = ctrl)
summary(modelglm)
predictors <- names(trainSplit)[names(trainSplit) != 'Default']
predglm <- predict(modelglm, testSplit)
summary(predglm)
confusionMatrix(predglm, testSplit$Default)
aucglm <- roc(as.numeric(testSplit$Default), as.numeric(predglm),  ci=TRUE)
plot(aucglm, ylim=c(0,1), print.thres=TRUE,
main=paste('Logistic Regression AUC:',round(aucglm$auc[[1]],3)),col = 'blue')
library(pROC)
### score prediction using AUC
confusionMatrix(predglm, testSplit$Default)
aucglm <- roc(as.numeric(testSplit$Default), as.numeric(predglm),  ci=TRUE)
plot(aucglm, ylim=c(0,1), print.thres=TRUE,
main=paste('Logistic Regression AUC:',round(aucglm$auc[[1]],3)),col = 'blue')
corrplot(soil_data[,4:11])
library(plyr)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(caret)
library(MASS)
library(randomForest)
library(party)
#Clear old data
rm(list=ls())
#use filechooser to select csv file
mydata <- read.csv(file.choose(), sep = ',')
head(mydata)
#summary
summary(mydata)
#data cleaning
#load libraries
library(cluster)
library(ggplot2)
library(factoextra)
library(corrplot)
library(psy)
library(lattice)
library(nFactors)
library(RColorBrewer)
library(scales)
#remove all data
rm(list=ls())
#use filechooser to select csv file
mydata <- read.csv(file.choose(), sep = ',')
View(mydata)
output <- lm(LIFE ~ CORRUPT, data = mydata)
summary(output)
ln(5)
log(5)
output2 <- lm(log(LIFE) ~ CORRUPT, data = mydata)
summary(output2)
resid(output) #List of residuals
plot(density(resid(output))) #A density plot
qqnorm(resid(output))
resid(output2) #List of residuals
plot(density(resid(output2))) #A density plot
qqnorm(resid(output2))
output2 <- lm(log(LIFE) ~ log(CORRUPT), data = mydata)
summary(output2)
resid(output2) #List of residuals
plot(density(resid(output2))) #A density plot
qqnorm(resid(output2))
output2 <- lm(log(CORRUPT) ~ LIFE, data = mydata)
summary(output2)
resid(output2) #List of residuals
plot(density(resid(output2))) #A density plot
qqnorm(resid(output2))
output2 <- lm(log(CORRUPT) ~ log(LIFE), data = mydata)
summary(output2)
resid(output2) #List of residuals
plot(density(resid(output2))) #A density plot
qqnorm(resid(output2))
View(mydata)
#simple linear regression
output <- lm(LSI ~ CORRUPT, data = mydata)
summary(output)
resid(output) #List of residuals
plot(density(resid(output))) #A density plot
qqnorm(resid(output))
output2 <- lm(log(LSI) ~ CORRUPT, data = mydata)
summary(output2)
resid(output2) #List of residuals
plot(density(resid(output2))) #A density plot
qqnorm(resid(output2))
#simple linear regression
output <- lm(LSI ~ CORRUPT, data = mydata)
summary(output)
resid(output) #List of residuals
plot(density(resid(output))) #A density plot
qqnorm(resid(output))
output2 <- lm(log(LSI) ~ CORRUPT, data = mydata)
summary(output2)
resid(output2) #List of residuals
plot(density(resid(output2))) #A density plot
qqnorm(resid(output2))
output2 <- lm(log(LSI) ~ log(CORRUPT), data = mydata)
summary(output2)
resid(output2) #List of residuals
plot(density(resid(output2))) #A density plot
qqnorm(resid(output2))
#remove all data
rm(list=ls())
#use filechooser to select csv file
mydata <- read.csv(file.choose(), sep = ',')
View(mydata)
#simple linear regression
output <- lm(Gesell.score ~ AGE, data = mydata)
summary(output)
resid(output) #List of residuals
plot(density(resid(output))) #A density plot
qqnorm(resid(output))
View(mydata)
#simple linear regression
output <- lm(Gesell.score ~ Age, data = mydata)
summary(output)
resid(output) #List of residuals
plot(density(resid(output))) #A density plot
qqnorm(resid(output))
#simple linear regression
output <- lm(log(Gesell.score) ~ Age, data = mydata)
summary(output)
resid(output) #List of residuals
plot(density(resid(output))) #A density plot
qqnorm(resid(output))
library(ggplot2)
ggplot(mydata, aes(x = Age, y = Gesell.score)) +
geom_boxplot()
library("readxl")
#remove all data
rm(list=ls())
mydata <- read_excel(file.choose())
str(mydata)
View(mydata)
startDate_forcast <- as.Date("20160401","%Y%m%d")
endDate_forcast <- as.Date("20160531","%Y%m%d")
history <- getDataFrame(mydata,startDate_history,endDate_history)
forcast <- getDataFrame(mydata,startDate_forcast,endDate_forcast)
history <- GetDataFrame(mydata,startDate_history,endDate_history)
forcast <- GetDataFrame(mydata,startDate_forcast,endDate_forcast)
#remove all data
rm(list=ls())
#use filechooser to select csv file
mydata <- read.csv(file.choose(), sep = ',')
str(mydata)
View(mydata)
library(corrplot)
corrplot(mydata[1,2],'number')
corrplot(mydata[,1:2],'number')
corrplot(mydata[,],'number')
corrplot(mydata[,1],'number')
corrplot(mydata[,1:2],'number')
summary(mydata[,1:2])
age_writer <- mydata[,1:2]
corrplot(age_writer,method = "number")
#simple linear regression
output <- lm(mydata$agedeath ~ mydata$writer, data = mydata)
summary(output)
resid(output) #List of residuals
plot(density(resid(output))) #A density plot
qqnorm(resid(output))
model1<- aov(writer~agedeath)
summary(model1)
#anova
model1<- aov(mydata$writer~mydata$agedeath)
summary(model1)
TukeyHSD(model1, conf.level = 0.99)
plot(TukeyHSD(model1, conf.level = 0.99),las=1, col = "red")
par(mfrow=c(2,2))
plot(model1)
#normality chck
uhat<-resid(model1)
shapiro.test(uhat)
#remove all data
rm(list=ls())
#use filechooser to select csv file
mydata <- read.csv(file.choose(), sep = ',')
str(mydata)
summary(mydata)
View(mydata)
library("ggpubr")
View(mydata)
ggboxplot(my_data, x = "materials", y = "gpi", color = "supp",
palette = c("#00AFBB", "#E7B800"))
ggboxplot(mydata, x = "materials", y = "gpi", color = "supp",
palette = c("#00AFBB", "#E7B800"))
ggboxplot(mydata, x = "material", y = "gpi", color = "supp",
palette = c("#00AFBB", "#E7B800"))
ggboxplot(mydata, x = "material", y = "gpi", color = "group",
palette = c("#00AFBB", "#E7B800"))
library("ggpubr")
ggboxplot(mydata, x = "material", y = "gpi", color = "group",
palette = c("#00AFBB", "#E7B800","#00ABBB","#E7E800","#00AFBF","#E7F800"))
res.aov2 <- aov(gpi ~ material + group, data = mydata)
summary(res.aov2)
res.aov3 <- aov(gpi ~ material + group, data = mydata)
res.aov3 <- aov(gpi ~ material + group + material:group, data = mydata)
summary(res.aov3)
#remove all data
rm(list=ls())
#use filechooser to select csv file
mydata <- read.csv(file.choose(), sep = ',')
str(mydata)
summary(mydata)
View(mydata)
library("ggpubr")
ggboxplot(mydata, x = "post", y = "pre", color = "group",
palette = c("#00AFBB", "#E7B800","#00BBBB"))
library(ggplot2)
ggplot2.scatterplot(data=mydata, xName='pre',yName='post',
groupName="group")
install.packages("easyGgplot2")
library(easyGgplot2)
ggplot2.scatterplot(data=mydata, xName='pre',yName='post',
groupName="group")
library(ggplot2)
ggplot(mydata, aes(pre, post)) + geom_point(aes(colour = factor(cyl)))
library(ggplot2)
ggplot(mydata, aes(pre, post)) + geom_point(aes(colour = factor(group)))
ggplot(mydata, aes(pre, post)) + geom_boxplot(colour = factor(group)))
ggplot(mydata, aes(pre, post)) + geom_boxplot(colour = factor(group))
ggplot(mydata, aes(pre, group)) + geom_boxplot()
ggplot(mydata, aes(group, pre)) + geom_boxplot()
output <- wilcox.test(pre, post)
output <- wilcox.test(mydata$pre, mydata$post)
res <- wilcox.test(weight ~ group, data = mydata,
exact = FALSE)
res <- wilcox.test(pre ~ group, data = mydata,
exact = FALSE)
res <- wilcox.test(pre,post ~ group, data = mydata,
exact = FALSE)
res <- wilcox.test(post ~ group, data = mydata,
exact = FALSE)
#remove all data
rm(list=ls())
#use filechooser to select csv file
mydata <- read.csv(file.choose(), sep = ',')
str(mydata)
summary(mydata)
output <- kruskal.test(strength ~ weeks, data = mydata)
print(output)
library(fma)
??fma
mydata <- dole
str(mydata)
unemployed_ts <- ts(ElectricPrim,start=1956, frequency=1)
unemployed_ts <- ts(mydata,start=1956, frequency=1)
plot(unemployed_ts, xlab="Year", ylab="Unemployment benefits")
str(mydata)
#Monthly total of people on unemployed benefits in Australia (January 1956–July 1992).
unemployed_ts <- ts(mydata,start=1956, frequency=12)
plot(unemployed_ts, xlab="Year", ylab="Unemployment benefits")
str(mydata)
usdeath <- usdeaths
str(usdeath)
usdeath_ts <- ts(usdeath,start=1973, frequency=12)
plot(usdeath_ts, xlab="Year", ylab="US death")
usdeath_ts <- ts(log(usdeath),start=1973, frequency=12)
plot(usdeath_ts, xlab="Year", ylab="US death")
#Quarterly production of bricks (in millions of units) at Portland, Australia (March 1956–September 1994)
bricks <- bricksq
str(bricks)
bricks_ts <- ts(bricks, start=1956, frequency = 12)
plot(bricks_ts, xlab="Year", ylab="Quarterly production of bricks (in millions of units)")
bricks_ts <- ts(bricks, start=1956, frequency = 4)
plot(bricks_ts, xlab="Year", ylab="Quarterly production of bricks (in millions of units)")
??dowjones
dj <- dowjones
str(dj)
dj_ts <- ts(usdeath,start=1, frequency=1)
plot(dj_ts)
??ecomposition
data <- econsumption
View(data)
#remove all data
rm(list=ls())
mydata <- econsumption
mydata <- econsumption
str(mydata)
#linear regression
plot(Mwh ~ temp, data=econsumption)
fit <- lm(Mwh ~ temp, data=econsumption)
plot(residuals(fit) ~ temp, data=econsumption)
forecast(fit, newdata=data.frame(temp=c(10,35)))
mydata2 <- olympic
View(mydata2)
View(mydata2)
mydata2 <- olympic
plot(time ~ year, data=olympic)
fit <- lm(time ~ year, data = olympic)
plot(residuals(fit) ~ year, data=olympic)
mydata2 <- olympic
plot(time ~ Year, data=olympic)
fit <- lm(time ~ Year, data = olympic)
plot(residuals(fit) ~ Year, data=olympic)
abline(fit)
fit <- lm(time ~ Year, data = olympic)
abline(fit)
forecast(fit, newdata=data.frame(temp=c(2000,2004,2008, 2012)))
plot(time ~ Year, data=olympic)
fit <- lm(time ~ Year, data = olympic)
abline(fit)
summary(fit)
plot(residuals(fit) ~ Year, data=olympic)
forecast(fit, newdata=data.frame(temp=c(2000,2004,2008, 2012)))
shiny::runApp('Documents/Coding/R/shiny/AnalyticsSchoolFinder')
runApp('Documents/Coding/R/shiny/AnalyticsSchoolFinder')
runApp('Documents/Coding/R/shiny/AnalyticsSchoolFinder')
runApp('Documents/Coding/R/shiny/AnalyticsSchoolFinder')
