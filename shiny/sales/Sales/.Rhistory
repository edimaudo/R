View(df_cts)
df_new <- cbind(df_cts,df_cat_new, Target)
#remove unnecessary columns
# # calculate correlation matrix
correlationMatrix <- cor(df_new[,1:length(df_new)-1])
# # summarize the correlation matrix
# print(correlationMatrix)
# # find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.35)
# # print indexes of highly correlated attributes
print(highlyCorrelated)
df_new <- df_new[,-c(highlyCorrelated)]
#split data
set.seed(123)
sample <- sample.split(df_new,SplitRatio = 0.75)
train <- subset(df_new,sample ==TRUE)
test <- subset(df_new, sample==FALSE)
ggplot(df,aes(x=as.factor(Target))) + geom_bar()
ggplot(df.backup,aes(x=as.factor(TARGET))) + geom_bar()
control <- trainControl(method="repeatedcv", number=10, repeats=1, sampling = SMOTE)
control <- trainControl(method="repeatedcv", number=10, repeats=1, sampling = "smote")
fit.rf <- train(Target~., data=train, method="rf",preProcess = c("scale", "center"), trControl=control)
Target <- as.factor(Target)
glimpse(Target)
Target <- as.factor(Target)
Target <- as.factor(as.numeric(Target))
Target <- df$TARGET
Target <- as.data.frame(Target)
Target[,1] <- ifelse(Target[,1] == "NO", '0', ifelse(Target[,1] == "YES", '1', '99'))
glimpse(Target)
Target <- as.factor(Target)
Target[,1] <- as.factor(ifelse(Target[,1] == "NO", '0', ifelse(Target[,1] == "YES", '1', '99')))
glimpse(Target)
Target <- df$TARGET
Target <- as.data.frame(Target)
Target[,1] <- ifelse(Target[,1] == "NO", '0', ifelse(Target[,1] == "YES", '1', '99'))
glimpse(Target)
Target <- lapply(Target, function(x) as.factor(as.character(x)))
glimpse(Target)
df_new <- cbind(df_cts,df_cat_new, Target)
#remove unnecessary columns
# # calculate correlation matrix
correlationMatrix <- cor(df_new[,1:length(df_new)-1])
# # summarize the correlation matrix
# print(correlationMatrix)
# # find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.35)
# # print indexes of highly correlated attributes
print(highlyCorrelated)
df_new <- df_new[,-c(highlyCorrelated)]
set.seed(123)
sample <- sample.split(df_new,SplitRatio = 0.75)
train <- subset(df_new,sample ==TRUE)
test <- subset(df_new, sample==FALSE)
control <- trainControl(method="repeatedcv", number=10, repeats=1, sampling = "smote")
fit.rf <- train(Target~., data=train, method="rf",preProcess = c("scale", "center"), trControl=control)
fit.gbm <- train(Target~., data=train, method="gbm", trControl=control)
fit.svm <- train(Target~., data=train, method="svmRadial", trControl=control)
results <- resamples(list(randomforest = fit.rf, gradboost = fit.gbm, svm = fit.svm))
summary(results)
# boxplot comparison
bwplot(results)
# Dot-plot comparison
dotplot(results)
test_scores <- predict(fit.rf, test)
confusionMatrix(test_scores, test$Target)
#objective - achieve Lift >4 and Accuracy > 65 for predicting customer answer
#remove old data
rm(list=ls())
#packages
packages <- c('tidyverse','caret','mlbench', 'caTools','readxl','unbalanced','dummies')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#load data
df <- read_excel(file.choose()) #main in customer analysis folder
glimpse(df)
summary(df)
#backup data
df.backup <- df
#check for missing data
missing_data <- apply(df, 2, function(x) any(is.na(x))) #no missing data
print(missing_data)
#check for balance
ggplot(df,aes(x=as.factor(TNPS_Answer_NLP))) + geom_bar() #data is unbalanced
df[1] <- NULL
df$TNPS_date <- as.Date(df$TNPS_date)
df$month <- months(df$TNPS_date)
df$TNPS_date <- NULL
Target <- df$TNPS_Answer_NLP
df$TNPS_Answer_NLP <- NULL
glimpse(df)
unique(df$PRICE_PLAN_CODE)
unique(df$rateplan_name)
unique(df$max_sms_cnt_dir)
df$PRICE_PLAN_CODE <- NULL
df$rateplan_name <- NULL
df$activation_district <- NULL
df$activation_region  <- NULL
df$last_transaction_district  <- NULL
df$last_transaction_region <- NULL
glimpse(df)
df_cat <- df[,c(1)]
#cts data
df_cts <- df[,-c(df_cat)]
df_cat <- df[,c(1)]
#cts data
df_cts <- df[,-(df_cat)]
df_cts <- df[,-df_cat]
val <- c(1)
df_cts <- df[,-val]
df_user <- read.csv(file.choose(), header = TRUE)
df_trips <- read.csv(file.choose(), header = TRUE)
df_transactions <- read.csv(file.choose(), header = TRUE)
glimpse(df_user)
#package
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice', 'caTools','dummies')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
glimpse(df_user)
glimpse(df_trips)
glimpse(df_transactions)
#remove old data
rm(list=ls())
#packages
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice', 'caTools','dummies')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df <- read.csv(file.choose(), sep = ";")
glimpse(df)
summary(df)
#recode y
df[,21] <- ifelse(df[,21] == "no", "0", "1")
df[,21] <- as.factor(df[,21])
y = df[,21]
#recode categorical
df_cat <- df[,c(2,3,4,5,6,7,8,9,10,15)]
df_cat <- lapply(df_cat, function(x) as.factor(as.character(x)))
df_cat_new <- dummy.data.frame(as.data.frame(df_cat), sep = "_")
#normalize cts variables
#normalize data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
df_cts <- df[,c(1,11,12,13,14,16,17,18,19,20)]
df_cts <- as.data.frame(lapply(df_cts, normalize))
#combine data
#combine data
df_new <- cbind(df_cat_new,df_cts, y)
#fine tune model
# # calculate correlation matrix
correlationMatrix <- cor(df_new[,1:length(df_new)-1])
# # summarize the correlation matrix
# print(correlationMatrix)
# # find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# # print indexes of highly correlated attributes
print(highlyCorrelated)
df_new <- df_new[,-c(highlyCorrelated)]
#split data
set.seed(123)
sample <- sample.split(df_new,SplitRatio = 0.75)
train <- subset(df_new,sample ==TRUE)
test <- subset(df_new, sample==FALSE)
df.backup <- df
control <- trainControl(method="repeatedcv", number=10, repeats=3)
#modelnames <- paste(names(getModelInfo()), collapse=',  ') #get model names
#adaboost
#fit.adaboost <- train(y~., data=train, method="adaboost", trControl=control)
#adabag
#fit.adabag <- train(y~., data=train, method="adaBag", trControl=control)
#random forest
#fit.rf <- train(y~., data=train, method="rf", trControl=control)
#boosting algorithm - Stochastic Gradient Boosting (Generalized Boosted Modeling)
fit.gbm <- train(y~., data=train, method="gbm", trControl=control)
#svm
#fit.svm <- train(y~., data=train, method="svmRadial", trControl=control)
#gbm h20
fit.gbmh2o <- train(y~., data=train, method="gbm_h2o", trControl=control)
#------------------
#compare models
#------------------
results <- resamples(list(gradboost = fit.gbm, gbmh20 = fit.gbmh2o))
summary(results)
# boxplot comparison
bwplot(results)
# Dot-plot comparison
dotplot(results)
results <- resamples(list(gradboost = fit.gbm))
test_scores <- predict(fit.gbm, test)
confusionMatrix(test_scores, test$Target)
confusionMatrix(test_scores, test$y)
View(df)
#remove old data
rm(list=ls())
#packages
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice', 'caTools','readxl')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df <- read.csv(file.choose(), sep = ";")
View(df)
df <- read.tsv(file.choose(), sep = ";")
df <- read_tsv(file.choose(), sep = ";")
#remove old data
rm(list=ls())
#packages
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice', 'caTools','readxl','readr')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df <- read_tsv(file.choose(), sep = ";")
df <- read_tsv(file.choose())
View(df)
df <- read.delim(file.choose(), sep="\t",stringsAsFactors = FALSE ,header=FALSE)
View(df)
head(df)
colnames(df) <- c("DateOccurred","DateReported",'Location','ShortDescription',"Duration",
"LongDescription")
df$DateOccurred <- as.Date(df$DateOccurred,format = "%Y%m%d")
#rfm model
#clear old data
rm(list=ls())
#packages
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice', 'caTools','readxl',
'lubridate','')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#load excel file
df <- as.data.frame(read_excel(file.choose()))
glimpse(df)
#rename columns
colnames(df) <- c("TRANDATE","SALESTXN","CUSTNO")
#do rfm model
rfm_data <- df %>%
select(CUSTNO,TRANDATE,SALESTXN) %>%
drop_na()
#create real rfm data
rfm_temp <- rfm_data %>%
group_by(CUSTNO) %>%
summarise(recency=(as.numeric(as.Date(today())-max(TRANDATE))),
frequency=n(), monetary= sum(SALESTXN))
View(rfm_temp)
#convert date
rfm_data <- rfm_data %>%
mutate(TRANDATE = as.Date(TRANDATE,"%Y-%m-%d"))
#create real rfm data
rfm_temp <- rfm_data %>%
group_by(CUSTNO) %>%
summarise(recency=(as.numeric(as.Date(today())-max(TRANDATE))),
frequency=n(), monetary= sum(SALESTXN))
#rfm rank scoring
# sort data set for Recency with Recency (ascending) - Frequency (descending) - Monetary (descending)
rfm_temp <- rfm_temp %>%
arrange(recency, desc(frequency), desc(monetary))
rfm_temp <- rfm_temp %>%
mutate(recency = 0-recency)
rfm_temp$rankR <- cut(rfm_temp$recency,5,labels=F)
#change recency back to normal
rfm_temp <- rfm_temp %>%
mutate(recency = 0-recency)
# sort data set for Frequency with Recency (descending) - Frequency (ascending) - Monetary (descending)
rfm_temp <- rfm_temp %>%
arrange(desc(recency), frequency, desc(monetary))
rfm_temp$rankF <- cut(rfm_temp$frequency,5,labels=F)
# sort data set for Monetary with Recency (descending) - Frequency (descending) - Monetary (ascending)
rfm_temp <- rfm_temp %>%
arrange(desc(recency), desc(frequency), monetary)
rfm_temp$rankM <- cut(rfm_temp$monetary,5,labels=F)
#combine rfm into single score
rfm_temp$Score <- with(rfm_temp, paste0(rankR, rankF, rankM))
rfm_temp <- rfm_temp %>%
mutate(Score = as.integer(Score))
#get output sorted by score
rfm_temp <- rfm_temp %>%
arrange(desc(Score))
View(rfm_temp)
require(lpSolve)
install.packages("lpSolve")
#LP MODEL
#8A + 7B
#3A + 8B >= 6
#6A + 4B >= 4.5
#4A + 6B >= 5
library(lpSolve)
#decision variables
C <- c(8,7)
#constraint matrix
A <- matrix(c(3,8,6,4,4,6),nrow = 3,byrow = TRUE)
B <- c(6,4,5,5)
constraint_direction <- c(">=",">=",">=",">=")
# Find the optimal solution
optimum <-  lp(direction="min",
objective.in = C,
const.mat = A,
const.dir = constranint_direction,
const.rhs = B,
all.int = T)
# Print status: 0 = success, 2 = no feasible solution
print(optimum$status)
constraint_direction <- c(">=",">=",">=",">=")
# Find the optimal solution
optimum <-  lp(direction="min",
objective.in = C,
const.mat = A,
const.dir = constraint_direction ,
const.rhs = B,
all.int = T)
# Print status: 0 = success, 2 = no feasible solution
print(optimum$status)
#decision variables
C <- c(8,7)
#constraint matrix
A <- matrix(c(3,6,4,8,4,6),nrow = 3,byrow = TRUE)
B <- c(6,4.5,5)
constraint_direction <- c(">=",">=",">=",">=")
# Find the optimal solution
optimum <-  lp(direction="min",
objective.in = C,
const.mat = A,
const.dir = constraint_direction ,
const.rhs = B,
all.int = T)
# Print status: 0 = success, 2 = no feasible solution
print(optimum$status)
#constraint matrix
A <- matrix(c(3,6,4,8,4,6),nrow = 2,byrow = TRUE)
B <- c(6,4.5,5)
constraint_direction <- c(">=",">=",">=",">=")
# Find the optimal solution
optimum <-  lp(direction="min",
objective.in = C,
const.mat = A,
const.dir = constraint_direction ,
const.rhs = B,
all.int = T)
# Print status: 0 = success, 2 = no feasible solution
print(optimum$status)
#constraint matrix
A <- matrix(c(3,6,4,8,4,6),nrow = 3,byrow = TRUE)
B <- c(6,4.5,5)
constraint_direction <- c(">=",">=",">=","<=")
# Find the optimal solution
optimum <-  lp(direction="min",
objective.in = C,
const.mat = A,
const.dir = constraint_direction ,
const.rhs = B,
all.int = T)
# Print status: 0 = success, 2 = no feasible solution
print(optimum$status)
#decision variables
C <- c(8,7)
#constraint matrix
A <- matrix(c(3,6,4,8,4,6),nrow = 3,byrow = TRUE)
B <- c(6,4.5,5)
constraint_direction <- c(">=",">=",">=")
# Find the optimal solution
optimum <-  lp(direction="min",
objective.in = C,
const.mat = A,
const.dir = constraint_direction ,
const.rhs = B,
all.int = T)
# Print status: 0 = success, 2 = no feasible solution
print(optimum$status)
# Check the value of objective function at optimal point
print(paste("Total cost: ", optimum$objval, sep=""))
library(readr)
df <- read_fwf("UKM00003023-data.txt", fwf_widths(c(1,1,6,7,1,5,1,5,1,5,6,6,6)))
names(df) <- c("LVLTYP1","LVLTYP2","ETIME","PRESS","PFLAG","GPH","ZFLAG","TEMP","TFLAG","RH","DPDP","WDIR","WSDP")
library(readr)
df <- read_fwf(file.choose(), fwf_widths(c(1,1,6,7,1,5,1,5,1,5,6,6,6)))
names(df) <- c("LVLTYP1","LVLTYP2","ETIME","PRESS","PFLAG","GPH","ZFLAG","TEMP","TFLAG","RH","DPDP","WDIR","WSDP")
View(df)
#remove old data
rm(list=ls())
#packages
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice', 'caTools','dummies','readxl')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df <- read_excel(file.choose()) #credit data
#check for missing data
missing_data <- apply(df, 2, function(x) any(is.na(x))) #no missing data
print(missing_data)
x <- df[1,]
x2 <- as.data.frame(x)
#remove old data
rm(list=ls())
#packages
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice', 'caTools','dummies','readxl')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df <- read_excel(file.choose()) #credit data
#check for missing data
missing_data <- apply(df, 2, function(x) any(is.na(x))) #no missing data
print(missing_data)
x <- df[1,]
x2 <- as.data.frame(x)
x2 <- as.data.frame(x)
#delete first row
df <- df[-c(1),]
#delete first column
df[1] <- NULL
colnamesinfo <- as.data.frame(colnames(x2[,3:24]))
colnames(colnamesinfo) <- c("columns")
View(df)
View(df)
library(xgboost)
Target <- as.factor(df$Y)
df_cat <- df[,c(2,3,4,6,7,8,9,10,11)]
#convert to factor
df_cat <- lapply(df_cat, function(x) as.factor(as.character(x)))
df_cat_new <- dummy.data.frame(as.data.frame(df_cat), sep = "_")
df_cts <- df[,c(5,12:23)]
#convert chr to float
df_cts <- lapply(df_cts, function(x) as.double(as.character(x)))
#normalize data
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
df_cts <- as.data.frame(lapply(df_cts, normalize))
df_new <- cbind(df_cat_new, df_cts, Target)
#remove redundant columns
# # calculate correlation matrix
correlationMatrix <- cor(df_new[,1:length(df_new)-1])
# # summarize the correlation matrix
# print(correlationMatrix)
# # find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# # print indexes of highly correlated attributes
print(highlyCorrelated)
df_new <- df_new[,-c(highlyCorrelated)]
#split data
set.seed(123)
sample <- sample.split(df_new,SplitRatio = 0.75)
train <- subset(df_new,sample ==TRUE)
test <- subset(df_new, sample==FALSE)
#create traning and test data
set.seed(100)  # For reproducibility
# Create index for testing and training data
inTrain <- createDataPartition(y = df_new$Target, p = 0.8, list = FALSE)
# subset power_plant data to training
training <- df_new[inTrain,]
# subset the rest to test
testing <- df_new[-inTrain,]
#convert to dmatrixes
X_train = xgb.DMatrix(as.matrix(training %>% select(-Target)))
y_train = training$Target
X_test = xgb.DMatrix(as.matrix(testing %>% select(-Target)))
y_test = testing$Target
shiny::runApp('Documents/Coding/R/shiny/sales/Sales')
shiny::runApp('Documents/Coding/R/shiny/sales/Sales')
runApp('Documents/Coding/R/shiny/sales/Sales')
runApp('Documents/Coding/R/shiny/sales/Sales')
runApp('Documents/Coding/R/shiny/sales/Sales')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#load data
file_path <- "Sample - Superstore.xls"
superstore <- read_excel(file.choose())
glimpse(superstore)
glimpse(superstore$Country)
glimpse(unique(superstore$Country))
p<-ggplot(superstore, aes(x=Category, y=Sales, fill=Category)) +
geom_bar(stat="identity")+theme_minimal()
p
runApp('Documents/Coding/R/shiny/sales/Sales')
runApp('Documents/Coding/R/shiny/olympics')
runApp('Documents/Coding/R/shiny/sales/Sales')
