summary(fit)
plot(Price ~., data=training)
plot(residuals(fit) ~ ., data=training)
#get accuracy and MSE
pred1 <- predict(fit, newdata = test)
fit <- lm(Target ~., data=training)
summary(fit)
plot(Target ~., data=training)
pred1 <- predict(fit, newdata = test)
{
mean(abs(error))
}
error <- pred1 - test$Target
MAE <- mae(error)
mae <- function(error)
{
mean(abs(error))
}
error <- pred1 - test$Target
MAE <- mae(error)
R2=summary(fit)$r.squared
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
df_update <- normalize(df)
df_update <- normalize(df[,1:15])
df_update <- cbind(df_update, df[,16])
View(df_update)
confusionMatrix(pred1,test$Target)
df_update <- cbind(df_update, df$Target)
View(df_update)
df_update <- normalize(df[,1:15])
df_update <- cbind(df_update, df$Target)
df_update <- df_update %>%
rename('Target' = `df$Target`)
df_update <- df_update %>%
rename(Target = `df$Target`)
df_update <- df_update %>%
rename(`df$Target` = Target)
df_update <- df_update %>%
rename(`df$Target` = 'Target')
#split data into train and test
sample <- sample.split(df,SplitRatio = 0.75)
training <- subset(df,sample ==TRUE)
test <- subset(df, sample==FALSE)
#option 1 - use all variables
fit <- lm(df$Target ~., data=training)
summary(fit)
plot(Target ~., data=training)
pred1 <- predict(fit, newdata = test)
mae <- function(error)
{
mean(abs(error))
}
error <- pred1 - test$Target
MAE <- mae(error)
R2=summary(fit)$r.squared
AIC(fit)
#normalize data
df_update <- normalize(df[,1:15])
df_update <- cbind(df_update, df$Target)
#find important features
# # calculate correlation matrix
correlationMatrix <- cor(df_update[,1:75])
# # summarize the correlation matrix
# print(correlationMatrix)
# # find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# # print indexes of highly correlated attributes
print(highlyCorrelated)
#find important features
# # calculate correlation matrix
correlationMatrix <- cor(df_update[,1:15])
# # summarize the correlation matrix
# print(correlationMatrix)
# # find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# # print indexes of highly correlated attributes
print(highlyCorrelated)
#find important features
# # calculate correlation matrix
correlationMatrix <- cor(df[,1:15])
# # summarize the correlation matrix
# print(correlationMatrix)
# # find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# # print indexes of highly correlated attributes
print(highlyCorrelated)
#option - normalize + log
df_update <- normalize(df[,1:15])
df_update <- cbind(df_update, df$Target)
#split data
sample <- sample.split(df,SplitRatio = 0.75)
training <- subset(df,sample ==TRUE)
test <- subset(df, sample==FALSE)
fit <- lm(log(df$Target) ~., data=training)
summary(fit)
AIC(fit)
plot(Target ~., data=training)
error <- pred1 - test$Target
MAE <- mae(error)
R2=summary(fit)$r.squared
fit <- lm(df$Target ~., data=log(training))
summary(fit)
AIC(fit)
pred1 <- predict(fit, newdata = test)
error <- pred1 - test$Target
MAE <- mae(error)
R2=summary(fit)$r.squared
fit <- lm(log(df$Target) ~., data=log(training))
summary(fit)
AIC(fit)
pred1 <- predict(fit, newdata = test)
error <- pred1 - test$Target
MAE <- mae(error)
R2=summary(fit)$r.squared
df <- read.csv(file.choose())
View(df)
#packages
packages <- c("tidyverse","ggplot2")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#filter for one country
df_filtered <- df %>%
filter(Country == "United States")
#filter for one country
df_filtered <- df %>%
dplyr::filter(Country == "United States")
glimpse(df)
#filter for one country
df_filtered <- df %>%
dplyr::filter(Country == United States)
#filter for one country
df_filtered <- df %>%
dplyr::filter(Country == United States)
#filter for one country
df_filtered <- df %>%
dplyr::filter(Country == 'Norway')
#clear old data
rm(list=ls())
#packages
packages <- c("tidyverse","ggplot2")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#olympics data
df <- read.csv(file.choose())
#filter for one country
df_filtered <- df %>%
dplyr::filter(Country == 'Norway')
#country <- unique(df$Country)
#select country
#country vs medal count
#sport and medal count
# game name and city, medal count
#then age vs. sex
#sex, age, sport
#sex, age, medal count
#height vs weight
#height, weight, sport
#height, weight, medal count
#classification of GDP
install.packages("dplyr")
install.packages("tidyverse")
#packages
packages <- c("tidyverse","ggplot2")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#filter for one country
df_filtered <- df %>%
dplyr::filter(Country == 'Norway')
#filter for one country
df_filtered <- df %>%
filter(Country == 'Norway')
update.packages("dplyr")
#packages
packages <- c("tidyverse","ggplot2")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
update.packages("tidyverse")
#filter for one country
df_filtered <- df %>%
filter(Country == 'Norway')
package_version(dplyr)
package_version('dplyr')
package_version("dplyr")
packageName("dplyr")
package_version()
package_version("tidyverse")
#clear old data
rm(list=ls())
#packages
packages <- c("tidyverse","ggplot2")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#filter for one country
df_filtered <- df %>%
filter(Country == 'Norway')
#packages
packages <- c("tidyverse","ggplot2")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#olympics data
df <- read.csv(file.choose())
#filter for one country
df_filtered <- df %>%
filter(Country == 'Norway')
update.packages(c("dplyr","tidyverse"))
require(devtools)
install_version("rlang", version = "x.x.x", repos = "http://cran.us.r-project.org")
install_version("dplyr", version = "0.7.7", repos = "http://cran.us.r-project.org")
#packages
packages <- c("tidyverse","ggplot2")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#filter for one country
df_filtered <- df %>%
filter(Country == 'Norway')
#olympics data
df <- read.csv(file.choose())
#filter for one country
df_filtered <- df %>%
filter(Country == 'Norway')
#filter for one country
df_filtered <- df %>%
filter(Country == "Norway")
#filter for one country
df_filtered <- df %>%
dplyr:filter(Country == "Norway")
#packages
packages <- c("dplyr","ggplot2")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#filter for one country
df_filtered <- df %>%
dplyr::filter(Country == "Norway")
update_packages("Rcpp")
#filter for one country
df_filtered <- df %>%
dplyr::filter(Country == "Norway")
install_version("Rcpp", version = "0.12.19", repos = "http://cran.us.r-project.org")
#filter for one country
df_filtered <- df %>%
dplyr::filter(Country == "Norway")
#clear old data
rm(list=ls())
#packages
packages <- c("dplyr","ggplot2")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
install.packages("dplyr")
#filter for one country
df_filtered <- df %>%
dplyr::filter(Country == "Norway")
install.packages("Rcpp")
install.packages("Rcpp")
#packages
packages <- c("dplyr","ggplot2")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#olympics data
df <- read.csv(file.choose())
#filter for one country
df_filtered <- df %>%
dplyr::filter(Country == "Norway")
View(df_filtered)
ggplot(data=df_filtered, aes(x=as.factor()) +geom_bar(stat="identity") + title("Medal Count")
)
ggplot(data=df_filtered, aes(x=na.omit(as.factor(Medal))) +geom_bar(stat="identity")) + title("Medal Count")
ggplot(data=df_filtered, aes(x=as.factor(na.omit(Medal))) +geom_bar(stat="identity")) + title("Medal Count")
ggplot(data=df_filtered, aes(x=as.factor(na.omit(Medal))) +geom_bar()) + title("Medal Count")
ggplot(data=df_filtered, aes(x=na.omit(Medal)) +geom_bar()) + title("Medal Count")
ggplot(data=df_filtered, aes(x=na.rm(Medal)) +geom_bar()) + title("Medal Count")
ggplot(data=df_filtered, aes(x=as.factor(na.rm(Medal))) +geom_bar()) + title("Medal Count")
ggplot(data=df_filtered, aes(x=as.factor(Medal), na.rm= TRUE)  +geom_bar(stat = "Identity"))
+ title("Medal Count")
ggplot(data=df_filtered, aes(x=as.factor(Medal), na.rm= TRUE)  +geom_bar(stat = "Identity"))
glimpse(df)
ggplot(data=df_filtered, aes(x=Medal, na.rm= TRUE)  +geom_bar(stat = "Identity"))
ggplot(data=df_filtered, aes(x=as.numeric(Medal), na.rm= TRUE)  +geom_bar(stat = "Identity"))
ggplot(data=df_filtered, aes(x=as.factor(Medal), na.rm= TRUE)  +geom_bar(stat = "Identity"))
ggplot(data=df_filtered, aes(x=as.factor(Medal), na.rm=TRUE)) + geom_bar(stat = "Identity")
ggplot(data=df_filtered, aes(x=as.factor(Medal), na.rm=TRUE)) + geom_bar()
#country vs medal count
data_filtered_medal <- data_filtered %>%
filter(Medal != "NA")
df_filtered_medal <- df_filtered %>%
filter(Medal != "NA")
#country vs medal count
df_filtered_medal <- df_filtered %>%
filter(Medal != "NA")
ggplot(data=df_filtered_medal, aes(x=reorder(as.factor(Medal)), na.rm=TRUE)) + geom_bar() + xlab("Medals") +
ggtitle("Medal Count") + theme_classic()
df_filtered_medal <- df_filtered %>%
filter(Medal != "NA")
ggplot(data=df_filtered_medal, aes(x=reorder(Medal)), na.rm=TRUE)) + geom_bar() + xlab("Medals") +
ggtitle("Medal Count") + theme_classic()
ggplot(data=df_filtered_medal, aes(x=Medal, na.rm=TRUE)) + geom_bar() + xlab("Medals") +
ggtitle("Medal Count") + theme_classic()
ggplot(data=df_filtered_medal, aes(x=Medal, na.rm=TRUE)) + geom_bar() + xlab("Medals") +
ggtitle("Medal Count") + theme_bw()
ggplot(data=df_filtered_medal, aes(reorder(x=Medal), na.rm=TRUE)) + geom_bar() + xlab("Medals") +
ggtitle("Medal Count") + theme_bw()
#sport and medal count
ggplot(data=df_filtered_medal, aes(x=Sport, fill=Medal, na.rm=TRUE)) + geom_bar(stat="identity") +
xlab("Medal Count") +
ggtitle("Medal Count by Sport") + theme_bw()
#then age vs. sex
ggplot(data=df_filtered, aes(x=Age, y=Sex, na.rm=TRUE)) + geom_bar() + xlab("Medals") +
ggtitle("Age Vs Sex") + theme_bw()
#then age vs. sex
ggplot(data=df_filtered, aes(x=Age, y=Sex, na.rm=TRUE)) + geom_bar(stat="Identity") + xlab("Medals") +
ggtitle("Age Vs Sex") + theme_bw()
ggplot(data=df_filtered, aes(x=Age, y=Sex, na.rm=TRUE)) + geom_bar(stat="Identity", position=position_dodge())
+ xlab("Age") +
ggtitle("Age Vs Sex") + theme_bw()
#then age vs. sex
ggplot(data=df_filtered, aes(x=Age,, na.rm=TRUE)) + geom_bar(stat="Identity", position=position_dodge())
+ xlab("Age") +
ggtitle("Age Vs Sex") + theme_bw()
#then age vs. sex
ggplot(data=df_filtered, aes(x=Age,, na.rm=TRUE)) + geom_bar()
+ xlab("Age") +
ggtitle("Age Vs Sex") + theme_bw()
#then age
ggplot(data=df_filtered, aes(x=Age, na.rm=TRUE)) + geom_bar(aes(fill = factor(Sex)))
+ xlab("Age") +
ggtitle("Age Vs Sex") + theme_bw()
#then age
ggplot(data=df_filtered, aes(x=Age, na.rm=TRUE)) + geom_bar(aes(fill = factor(Sex)))
+ xlab("Age") + ggtitle("Age Vs Sex") + theme_bw()
#then age
ggplot(data=df_filtered, aes(x=Age, na.rm=TRUE)) + geom_bar(aes(fill = (Sex)))
+ xlab("Age") + ggtitle("Age Vs Sex") + theme_bw()
#then age
ggplot(data=df_filtered, aes(x=Age, na.rm=TRUE)) + geom_bar(aes(fill = (Sex))) + xlab("Age") +
ggtitle("Age Vs Sex") + theme_bw()
#then age
ggplot(data=df_filtered, aes(x=Age, na.rm=TRUE)) + geom_bar(aes(fill = Sex)) + xlab("Age") +
ggtitle("Age Vs Sex") + theme_bw()
# Change point shapes by the levels of cyl
ggplot(data=df_filtered, aes(x=Height, y=Weight)) +
geom_point() + xlab("Height") + ylab("Weight") +
ggtitle("Weight Vs Height") + theme_bw()
#game and medal count
ggplot(data=df_filtered, aes(x=reorder(as.factor(Games)) , na.rm=TRUE)) +
geom_bar(aes(fill = Medal)) + xlab("Age") +
ggtitle("Age Vs Sex") + theme_bw()
#game and medal count
ggplot(data=df_filtered, aes(x=factor(Games) , na.rm=TRUE)) + geom_bar(aes(fill = Medal)) + xlab("Age") +
ggtitle("Age Vs Sex") + theme_bw()
#game and medal count
ggplot(df_filtered_medal, aes(x=factor(Games) , na.rm=TRUE)) + geom_bar(aes(fill = Medal)) + xlab("Age") +
ggtitle("Games Medal count") + theme_bw()
#game and medal count
ggplot(df_filtered_medal, aes(x=factor(Games) , na.rm=TRUE)) +
geom_bar(aes(fill = factor(Medal))) + xlab("Age") +
ggtitle("Games Medal count") + theme_bw()
#game and medal count
ggplot(df_filtered_medal, aes(x=factor(Games) , na.rm=TRUE)) + geom_bar(aes(fill = Medal)) + xlab("Age") +
ggtitle("Games Medal count") + theme_bw()
#sport and medal count
ggplot(df_filtered_medal, aes(y=factor(Sport) , na.rm=TRUE)) + geom_bar(aes(fill = Medal)) +
ylab("Sport events") +
ggtitle("Sport Medal count") + theme_bw()
#sport and medal count
ggplot(df_filtered_medal, aes(x=factor(Sport) , na.rm=TRUE)) + geom_bar(aes(fill = Medal)) +
ylab("Sport events") +
ggtitle("Sport Medal count") + theme_bw()
#sport and medal count
ggplot(df_filtered_medal, aes(x=Sport , na.rm=TRUE)) + geom_bar(aes(fill = Medal)) +
ylab("Sport events") +
ggtitle("Sport Medal count") + theme_bw()
#sport and medal count
ggplot(df_filtered_medal, aes(x=Sport , na.rm=TRUE)) + geom_bar(aes(fill = Medal)) +
ylab("Sport events") +
ggtitle("Sport Medal count") + theme_bw() + theme(axis.text.x = element_text(angle=60, face="bold", colour="black"))
#sport and medal count
ggplot(df_filtered_medal, aes(x=Sport , na.rm=TRUE)) + geom_bar(aes(fill = Medal)) +
ylab("Sport events") +
ggtitle("Sport Medal count") + theme_bw() + theme(axis.text.x = element_text(angle=85, face="bold", colour="black"))
#sport and medal count
ggplot(df_filtered_medal, aes(x=Sport , na.rm=TRUE)) + geom_bar(aes(fill = Medal)) +
ylab("Sport events") +
ggtitle("Sport Medal count") + theme_bw() + theme(axis.text.x = element_text(angle=2, face="bold", colour="black"))
#classification of GDP
df_clust <- df %>%
select(GDP,Population, Country)
glimpse(df)
#classification of GDP
df_clust <- df %>%
select(GDP....per.capita.,Population, Country)
mca <- MCA(df_clust, graph = FALSE)
library("factorextra")
install.packages(c("FactorMineR","factorextra"))
mca <- MCA(df_clust, graph = FALSE)
library("factorextra")
install.packages('factorextra')
#remove old data
rm(list=ls)
#packages
packages <- c("corrplot","ggplot2","pastecs")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df <- read.table(file.choose())
library("tidyverse")
glimpse(df)
df <- read.table(file.choose(), header=T)
glimpse(df)
stat.desc(df[,2:6])
#scatter plot
ggplot(df, aes(x=lifesat, y=leissat)) + geom_point() + geom_point(size=2, shape=23) +
geom_smooth(method=lm, se=FALSE, fullrange=TRUE)
ggplot(data=df, aes(x=jobstres)) +
geom_point() + ylab("Count") +
ggtitle("Jobstres description") + theme_classic()
#barplot for jobstres
ggplot(data=df, aes(x=jobstres)) +
geom_bar() + ylab("Count") +
ggtitle("Jobstres description") + theme_classic()
ggplot(data=df, aes(x=jobstres)) +
geom_bar(fill=famstres) + ylab("Count") +
ggtitle("Jobstres description") + theme_classic()
ggplot(data=df, aes(x=jobstres)) +
geom_bar(fill=famstres) + ylab("Count") +
ggtitle("Jobstres description") + theme_classic()
ggplot(data=df, aes(x=jobstres)) +
geom_bar(aes(fill=famstres)) + ylab("Count") +
ggtitle("Jobstres description") + theme_classic()
ggplot(df, aes(x=leissat)) + geom_histogram() + theme_classic()
ggplot(df, aes(x=leissat)) + geom_density() + theme_classic()
View(df)
#clear old data
rm(list=ls())
#packages
packages <- c("corrplot","ggplot2","prophet","pastecs","caTools","data.table","lubridate",
"tidyverse",'xgboost','Matrix','methods',"mlbench")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#read data
dataset_sales_train <- read.csv(file.choose())
dataset_item <- read.csv(file.choose())
dataset_item <- read.csv(file.choose())
#read data
dataset_train <- read.csv(file.choose())
dataset_item <- read.csv(file.choose())
dataset_test <- read.csv(file.choose())
View(dataset_train)
#clear old data
rm(list=ls())
shiny::runApp('Documents/Coding/R/shiny/olympics')
runApp('Documents/Coding/R/shiny/olympics')
runApp('Documents/Coding/R/shiny/olympics')
