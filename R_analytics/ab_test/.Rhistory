geom_line(color = "#00AFBB", size = 2)
ggplot(data = df, aes(x = date, y = CPI))+
geom_line(color = "#00AFBB", size = 2) + theme_classic()
tsData <- df[, 1] # ts data
decomposedRes <- decompose(tsData, type="mult") # use type = "additive" for additive components
plot (decomposedRes) # see plot below
stlRes <- stl(tsData, s.window = "periodic")
tsData <- df#[, 1] # ts data
decomposedRes <- decompose(tsData, type="mult") # use type = "additive" for additive components
plot (decomposedRes) # see plot below
stlRes <- stl(tsData, s.window = "periodic")
acfRes <- acf(df) # autocorrelation
pacfRes <- pacf(df)  # partial autocorrelation
#clear old packages
rm(list=ls())
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify','shiny','forecast',"gridExtra", "readxl",
'tseries')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#load data
df <- read_excel(file.choose())
#data summary
summary(df)
#rename columns
colnames(df) <- c("date",'CPI')
#timeplot of CPI Series
# Basic line plot
ggplot(data = df, aes(x = date, y = CPI))+
geom_line(color = "#00AFBB", size = 2) + theme_classic()
plot(aggregate(df,FUN=mean))
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify','shiny','forecast',"gridExtra", "readxl",
'tseries','tsbox')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df1 <- ts(df)
tsData <- df1[, 1] # ts data
decomposedRes <- decompose(tsData, type="mult") # use type = "additive" for additive components
plot (decomposedRes) # see plot below
stlRes <- stl(tsData, s.window = "periodic")
View(df1)
View(df)
ggplot(data = df, aes(x = date, y = CPI))+
geom_line(color = "#00AFBB", size = 0.5) + theme_classic()
tsData <- df1[, 1] # ts data
decomposedRes <- decompose(tsData, type="mult")
View(df1)
View(df)
glimpse(df)
tsData <- df[, 1] # ts data
decomposedRes <- decompose(tsData, type="mult")
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify','shiny','forecast',"gridExtra", "readxl",
'tseries','zoo')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df1 <- zoo(order.by=as.Date(as.character(df$date), format='%m/%d/%Y'),df$CPI )
df1 <- zoo(df$CPI, order.by=as.Date(as.character(df$date), format='%m/%d/%Y'))
df1 <- xts(as.Date(df$date, format='%m/%d/%Y',df$CPI))
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify','shiny','forecast',"gridExtra", "readxl",
'tseries','zoo','xts')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df1 <- xts(as.Date(df$date, format='%m/%d/%Y',df$CPI))
read.table.zoo(file.choose())
df1 <- zoo::as.zoo(df)
df1 <- as.ts(df)
View(df1)
smith <- xts(x = df, order.by = date)
df$date <- as.date(df$date)
df$date <- as.Date(df$date)
smith <- xts(x = df, order.by = date)
View(df)
df1 <- as.ts(df)
View(df1)
df$date <- as.POSIXct(df$date)
smith <- xts(x = df, order.by = date)
#clear old packages
rm(list=ls())
packages <- c('ggplot2', 'corrplot','tidyverse','forecast',"gridExtra",
"readxl",'tseries','zoo','xts','pysch','factorExtra')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df <- read_file(file.choose()) #"HBAT_200.jmp"
shiny::runApp('Documents/Coding/R/shiny/wine_review')
shiny::runApp('Documents/Coding/R/shiny/wine_review')
runApp('Documents/Coding/R/shiny/wine_review')
runApp('Documents/Coding/R/shiny/wine_review')
#clear environment
rm(list=ls())
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify','shiny','countrycode','highcharter',
"gridExtra","readxl")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df <- read_csv(file.choose())
View(df)
summary(df)
glimpse(df)
#check for missing data
missing_data <- apply(df, 2, function(x) any(is.na(x)))
print(missing_data)
corinfo <- cor(df[,1:length(df)-1])
corrplot(corinfo)
corinfo <- cor(df[,1:c(2,3,6)])
corinfo <- cor(df[,c(2,3,6)])
View(corinfo)
corrplot(corinfo)
corrplot(corinfo, method="color")
df_cor <- df(,c(2,3,6))
df_cor <- df[,c(2,3,6)]
View(df_cor)
corinfo <- cor(df_cor)
corrplot(corinfo, method="color")
corrplot(corinfo, method="number")
corrplot(corinfo, method="number")
df <- read_csv(file.choose(),header = T)
df <- read_csv(file.choose(),header = TRUE)
View(df)
corrplot(corinfo, method="number",bg="lightgray")
unique(df$User_Input)
unique(df$User_Outcome)
View(df)
df_cts <- df[,c(2,3)]
df_outcome <- df[,c(6)]
#categorical variables
df_cat <- df[,c(4,5)]
#one hot encoding
df_cat_new <- dummy.data.frame(as.data.frame(df_cat), sep = "_")
df_new <- cbind(df_cat_new, df_cts,df_outcome)
View(df_new)
corrplot(cor(df_new))
corrplot(cor(df_new),method="number")
#check for relationship
corrplot(cor(df_new),method="number",bg="lightgray")
#check for relationship
corrplot(cor(df_new),method="number",bg="lightgray")
View(df)
#clear environment
rm(list=ls())
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify', "RcolorBrewer")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
library(RColorBrewer)
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify', "RColorBrewer")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df <- read_csv(file.choose())
library("GGally")
ggpairs(df, columns = 1:ncol(df), title = "",
axisLabels = "show", columnLabels = colnames(data[, columns]))
ggpairs(df, columns = 1:ncol(df), title = "",
axisLabels = "show", columnLabels = colnames(df[, columns]))
ggpairs(df)
df_cor <- df[,c(2,3,6)]
corinfo <- cor(df_cor)
corrplot(corinfo, method="number",bg="lightgray")
View(df)
tbl = table(df$User_Input, df$User_Outcome)
chisq.test(tbl) #Test hypothesis whether the input is independent of Outcome at .05 significance level.
#graphs
ggplot(data=df, aes(x=User_Input)) +
geom_bar(stat="identity",fill=User_Outcome) + theme_classic() + labs(x = "Age", y = "Count") +
theme(axis.text.x = element_text(angle = 0, hjust = 1),
legend.position="none",axis.title = element_text(size = 25),
axis.text = element_text(size = 15))
ggcorrplot(corinfo)
ggplot(data=df, aes(x=User_Input)) +
geom_bar(stat="identity",aes(fill=User_Outcome)) + theme_classic()
ggplot(data=df, x=User_Input) +
geom_bar(stat="identity",aes(fill=User_Outcome)) + theme_classic()
ggplot(data=df, x=User_Input, y=User_Outcome) +
geom_bar(stat="identity",aes(fill=User_Outcome)) + theme_classic() +
labs(x = "User Input")
View(df)
glimpse(df)
ggplot(data=df, x=User_Input, y=User_Outcome) +
geom_bar(stat="identity",aes(fill=as.factor(User_Outcome))) + theme_classic() +
labs(x = "User Input")
ggplot(data=df, x=as.factor(User_Input)) +
geom_bar(stat="identity",aes(fill=as.factor(User_Outcome))) + theme_classic()
df$User_Outcome <- as.factor(df$User_Outcome)
df$User_Input <- as.factor(df$User_Input)
ggplot(data=df, x=as.factor(User_Input)) +
geom_bar(stat="identity",aes(fill=as.factor(User_Outcome))) + theme_classic()
ggplot(data=df, x=User_Input, fill=User_Outcome)) +
geom_bar(stat="identity") + theme_classic()
ggplot(data=df, x=User_Input, fill=User_Outcome) +
geom_bar(stat="identity") + theme_classic()
ggplot(data=df, aes(x=User_Input, fill=User_Outcome)) +
geom_bar(stat="identity") + theme_classic()
ggplot(data=df, aes(x=User_Input, y=User_Outcome)) +
geom_bar(stat="identity") + theme_classic()
ggplot(data=df, aes(x=User_Input, fill=User_Outcome)) +
geom_bar(stat="identity") + theme_classic()
ggplot(data=df, aes(x=User_Input, y = User_Score, fill=User_Outcome)) +
geom_bar(stat="identity") + theme_classic()
#graphs
ggplot(data=df, aes(x=User_Input, y = User_Score, fill=User_Outcome)) +
geom_bar(stat="identity", position=position_dodge()) + theme_classic()
#graphs
ggplot(data=df, aes(x=User_Input, y = User_Score, fill=User_Outcome)) +
geom_bar(stat="identity") + theme_classic()
ggplot(data=df, aes(x=User_Input, y = User_Score)) +
geom_bar(stat="identity", aes(fill=User_Outcome)) + theme_classic()
ggplot(data=df, aes(x=User_Input, y = User_Outcome)) +
geom_bar(stat="identity", aes(fill=User_Score)) + theme_classic()
ggpairs(df)
unique(df$User_Question) #types of questions
unique(df$User_Input) #types of inputs
unique(df$User_Outcome) #types of inputs
unique(df$User_Score) #score types
#clear environment
rm(list=ls())
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify', "RColorBrewer", "GGally",'ggcorrplot')
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#clear environment
rm(list=ls())
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify', "RColorBrewer", "GGally")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
df <- read_csv(file.choose())
df.backup <- df
glimpse(df)
#get descriptive stats
summary(df)
#check for missing data
missing_data <- apply(df, 2, function(x) any(is.na(x)))
print(missing_data)
unique(df$User_Question) #types of questions
unique(df$User_Input) #types of inputs
unique(df$User_Outcome) #types of inputs
unique(df$User_Score) #score types
ggpairs(df)
df_cor <- df[,c(2,3,6)]
corinfo <- cor(df_cor)
corrplot(corinfo, method="number",bg="lightgray")
tbl = table(df$User_Input, df$User_Outcome)
chisq.test(tbl)
shiny::runApp('Documents/Coding/R/shiny/wine_review')
shiny::runApp('Documents/Coding/R/shiny/wine_review')
setwd("~/Documents/Coding/R/R_analytics/ab_test")
#Case study - A/B testing
# As such, we have run two A/B tests (testing different features, one in February, the other in May) with a
# classical setup: show a control group to the majority of our users (constituting a subset of website visits),
# and a test group (containing the new feature) to the remaining users
# (and corresponding remaining visits).
# You are provided with one csv file for each of these two tests,
# containing the results collected in terms of our main base metrics.
# The data is aggregated by ymd (the date),
# platform (the country-specific trivago platform),
# and group (control or test). These are the first 3 columns of the files.
# The remaining columns contain the base metrics:
# • visits - how many website visits from our users were logged
# • clicks - how many times our users clicked in one of our prices and were re-directed to the website of one of our advertisers.
#Note that each individual visit may or may not include clicks.
# • revenue - how much money was generated for. You can work under the assumption that this revenue is generated under a CPC model.
# • bookings - how many accommodation reservations were made in our advertisers’
# websites.
# • booking_amount - the corresponding amount (in EUR) paid by the users for the
# accommodation reservations.
#clear environment
rm(list=ls())
packages <- c('ggplot2', 'corrplot','tidyverse','caret','mlbench','mice',
'caTools','dummies','ggfortify', "RColorBrewer", "GGally")
#load packages
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
#load data
test1 <- read.csv("test1.csv")
test2 <- read.csv("test2.csv")
trend_data <- test1 %>%
select(ymd, platform,clicks)
p <- ggplot(trend_data, aes(x=day, y=clicks, fill=platform)) +
geom_line()
p
p <- ggplot(trend_data, aes(x=ymd, y=clicks, fill=platform)) +
geom_line() +
xlab("")
p
p <- ggplot(trend_data, aes(x=ymd, y=clicks, fill=platform)) +
geom_line( color="#69b3a2") +
xlab("") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
p
trend_data <- test1 %>%
group_by(ymd) %>%
summarise(total_clicks=sum(clicks)) %>%
select(ymd,total_clicks)
p <- ggplot(trend_data, aes(x=ymd, y=clicks)) +
geom_line( color="#69b3a2") +
xlab("") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
p
p <- ggplot(trend_data, aes(x=ymd, y=clicks)) +
geom_line( color="#69b3a2") +
xlab("") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=45, hjust=1))
p
p <- ggplot(trend_data, aes(x=ymd, y=clicks)) +
geom_line( color="#69b3a2") +
labs(x = "Date", y = "Clicks") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title = element_text(size = 20),axis.text = element_text(size = 15))
p
p <- ggplot(trend_data, aes(x=ymd, y=total_clicks)) +
geom_line( color="#69b3a2") +
labs(x = "Date", y = "Clicks") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title = element_text(size = 20),axis.text = element_text(size = 15))
p
p <- ggplot(trend_data, aes(x=ymd, y=total_clicks)) +
geom_bar( color="#69b3a2") +
labs(x = "Date", y = "Clicks") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title = element_text(size = 20),axis.text = element_text(size = 15))
p
p <- ggplot(trend_data, aes(x=ymd, y=total_clicks)) +
geom_bar(stat = identity) +
labs(x = "Date", y = "Clicks") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title = element_text(size = 20),axis.text = element_text(size = 15))
p
p <- ggplot(trend_data, aes(x=ymd, y=total_clicks)) + geom_bar() +
labs(x = "Date", y = "Clicks") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title = element_text(size = 20),axis.text = element_text(size = 15))
p
View(trend_data)
p <- ggplot(trend_data, aes(x=ymd, y=total_clicks)) + geom_line() +
labs(x = "Date", y = "Clicks") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title = element_text(size = 20),axis.text = element_text(size = 15))
p
p <- ggplot(trend_data, aes(x=ymd, y=total_clicks)) + geom_bar() +
labs(x = "Date", y = "Clicks")
p
p <- ggplot(trend_data, x=ymd, y=total_clicks) + geom_bar() +
labs(x = "Date", y = "Clicks") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title = element_text(size = 20),axis.text = element_text(size = 15))
p
p <- ggplot(trend_data, x=aes(ymd), y=total_clicks) + geom_bar() +
labs(x = "Date", y = "Clicks") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title = element_text(size = 20),axis.text = element_text(size = 15))
p
p <- ggplot(trend_data, aes(x=factor(ymd), y=total_clicks)) + geom_bar() +
labs(x = "Date", y = "Clicks") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title = element_text(size = 20),axis.text = element_text(size = 15))
p
p <- ggplot(trend_data, aes(x=factor(ymd), y=total_clicks)) + geom_line() +
labs(x = "Date", y = "Clicks") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title = element_text(size = 20),axis.text = element_text(size = 15))
p
p <- ggplot(trend_data, aes(x=factor(ymd), y=total_clicks)) + geom_line(aes(ymd)) +
labs(x = "Date", y = "Clicks") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title = element_text(size = 20),axis.text = element_text(size = 15))
p
ggplot(trend_data, aes(x=factor(ymd), y=total_clicks)) +
geom_point(na.rm=TRUE)
ggplot(trend_data, aes(x=factor(ymd), y=total_clicks)) +
geom_line(na.rm=TRUE)
ggplot(trend_data, aes(x=ymd, y=total_clicks)) +
geom_point(na.rm=TRUE)
ggplot(trend_data, aes(x=ymd, y=total_clicks)) +
geom_bar(na.rm=TRUE)
ggplot(trend_data, aes(x=ymd, y=total_clicks)) +
geom_bar(na.rm=TRUE, stat = "identity")
ggplot(trend_data, aes(x=ymd, y=total_clicks)) +
geom_line(na.rm=TRUE, stat = "identity")
trend_data <- test1 %>%
group_by(ymd) %>%
summarise(total_clicks=sum(clicks)) %>%
select(ymd,total_clicks) + ggplot(trend_data, aes(x=ymd, y=total_clicks)) +  geom_bar(na.rm=TRUE, stat = "identity") +
labs(x = "Date", y = "Clicks") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title = element_text(size = 20),axis.text = element_text(size = 15))
ggplot(trend_data, aes(x=ymd, y=total_clicks)) +  geom_bar(na.rm=TRUE, stat = "identity") +
labs(x = "Date", y = "Clicks") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title = element_text(size = 20),axis.text = element_text(size = 15))
trend_data <- test1 %>%
group_by(ymd) %>%
summarise(total_clicks=sum(clicks), total_revenue=sum(revenue)) %>%
select(ymd,total_clicks,total_revenue)
trend_data <- test1 %>%
group_by(ymd) %>%
summarise(total_clicks=sum(clicks), total_revenue=sum(revenue), total_bookings=sum(bookings)) %>%
select(ymd,total_clicks,total_revenue, total_bookings)
ggplot(trend_data, aes(x=ymd, y=total_revenue)) +  geom_bar(na.rm=TRUE, stat = "identity") +
labs(x = "Date", y = "Clicks") + theme_classic()
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title = element_text(size = 20),axis.text = element_text(size = 15))
#month trend - revenue
ggplot(trend_data, aes(x=ymd, y=total_revenue)) +  geom_bar(na.rm=TRUE, stat = "identity") +
labs(x = "Date", y = "Clicks") + theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title = element_text(size = 20),axis.text = element_text(size = 15))
ggplot(trend_data, aes(x=ymd, y=total_revenue)) +  geom_bar(na.rm=TRUE, stat = "identity", color="blue") +
labs(x = "Date", y = "Clicks") + theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title = element_text(size = 20),axis.text = element_text(size = 15))
ggplot(trend_data, aes(x=ymd, y=total_bookings)) +  geom_bar(na.rm=TRUE, stat = "identity", color="green") +
labs(x = "Date", y = "Clicks") + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.text = element_text(size = 15),
legend.title = element_text(size = 15),
axis.title = element_text(size = 20),axis.text = element_text(size = 15))
df_cor = test1[,c(4,5,6,7,8)]
corrplot(cor(df_cor))
corrplot(cor(df_cor), method = "number")
shiny::runApp('~/Documents/Coding/R/shiny/wine_review')
